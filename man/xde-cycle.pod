=pod

=head1 NAME

xde-cycle - window cycling for XDE

=head1 SYNOPSIS

B<xde-cycle> [I<OPTIONS>]

=head1 DESCRIPTION

Provides keyboard-based window cycling for window managers that do not
provide cycling themselves or for those that provide an inferior one.
The window cycling list is a list of windows on the current monitor (or
multiple monitors) and current workspace (or multiple workspaces) and is
accessed with a hot key.

=head1 OPTIONS

The options detailed below are recognized by B<xde-cycle>.  B<xde-cycle>
uses L<getopt_long_only(3)>, so unambiguous abbreviations of long
options and long options with a single dash are also supported.

B<xde-cycle> accepts the following options:

=head2 COMMAND OPTIONS

When no command is specified, B<xde-cycle> attempts to start a new
instance of the program.  When specified, the following options alter
the primary operating mode of the program:

=over

=item []

Run as a cycle detection process.  This is the default when no other
command option is specified.  It is an error if an instance of
B<xde-cycle> is already running and the program will exit with an error
code and diagnostic.

=item B<-r>, B<--replace>

Replace a running instance of the program with this one (if one is
indeed running).  It is not an error if no instance is currently
running.

=item B<--quit>, B<-q>

Ask a running instance of the program to quit (if one is indeed
running).  It is not an error if no instance is currently running.

=item B<--help>, B<-h>

Prints usage information and the current options settings and defaults
and exits.

=item B<--version>, B<-V>

Prints the version of the program and a brief copyright statement and
exits.  Parse the first line with L<awk(1)> to obtain just the version
number.

=item B<--copying>, B<-C>

Prints the long copying permission statement and exits.

=back

=head2 GENERAL OPTIONS

In addition to command options, B<xde-cycle> accepts the following
general options:

=over

=item B<-d>, B<--display> I<DISPLAY>

Specify the display to use (overriding the B<DISPLAY> environment
variable).  The default is the value of the B<DISPLAY> environment
variable.

=item B<-s>, B<--screen> I<SCREEN>

Specify the screen number to use when locating the current window and
workspace.  The default is either specified by the B<DISPLAY>
environment variable (when that variable specifies a screen); otherwise,
all screens will be considered.

=item B<-M>, B<--monitor> I<MONITOR>

Specify the monitor number to use when locating the current window and
workspace.  The default is either specified by location; otherwise, all
monitors will be considered.

=item B<-t>, B<--timeout> I<MILLISECONDS>

=item B<-B>, B<--border> I<PIXELS>

=item B<-f>, B<--filename> I<FILENAME>

=item B<-P>, B<--pointer>

=item B<-K>, B<--keyboard>

=item B<-b>, B<--button> I<BUTTON>

=item B<--timestamp>, B<-T> I<TIMESTAMP>

Provides the X11 server time-stamp of the event that initiated the
window cycle.

=item B<-w>, B<--which> {B<default>|B<active>|B<focused>|B<pointer>|I<SCREEN>}

Specifies the screen and monitor to use for current window cycling.
This can be one of the following values (case insensitive, may be
abbreviated):

=over

=item C<default>

Uses the value of other options to automatically determine which screen
and monitor on which to place the pop-up.

When the B<--button> option is specified with a non-zero I<BUTTON>
argument, or when the B<--pointer> option is specified, the screen and
monitor is determined as though C<pointer> was specified.

When the B<--button> option is specified with a zero I<BUTTON> argument,
or when the B<--keyboard> option is specified, the screen and monitor is
determined as though C<focused> was specified (and failing a focused
window, as though C<active> was specified).

=item C<active>

Use the screen and monitor with the active window (in the EWMH sense).
This is the screen and monitor which contain the window specified by the
B<_NET_ACTIVE_WINDOW> property on the root window.

=item C<focused>

Use the screen and monitor with the focused window (in the EWMH sense or
simply the client with the keyboard focus).  This is the client with a
B<_NET_WM_STATE_FOCUSED> atom set in B<_NET_WM_STATE>, or the client
(visible client with the B<WM_STATE> property set to state C<Normal>)
that has the keyboard focus according to the X server.

If no focused client can be found (e.g. focus is on the root window),
screen and monitor selection falls back to C<active>, as described
above.

=item C<pointer>

Use the screen and monitor containing the pointer.

=item I<SCREEN>

Use the screen specified by I<SCREEN> and the monitor specified with the
B<--monitor> option, or the default monitor for the screen.

=back

When unspecified, the default is C<default>.

=item B<-W>, B<--where> {B<default>|B<pointer>|B<center>|B<topleft>|B<bottomright>|I<GEOMETRY>}

Specifies the position of the cycle window.  This can be one of the
following values (case insensitive, may be abbreviated):

=over

=item C<default>

Uses the value of other options to automatically determine the position
of the cycle menu.

When the B<--button> option is specified with a non-zero I<BUTTON>
argument, or when the B<--pointer> option is specified, the position is
determined as though C<pointer> was specified.

When the B<--button> option is specified with a zero
I<BUTTON> argument, or when the B<--keyboard> option is specified, the
position is determined as though C<center> was specified.

=item C<pointer>

Place the northwest corner of the cycle window under the mouse pointer.

=item C<center>

Place the cycle window in the centre of the active monitor.

=item C<topleft>

Place the cycle window in the top-left corner of the work area of the
active monitor.

=item C<bottomright>

Place the cycle window in the bottom-left corner of the work area of the
active monitor.

=item I<GEOMETRY>

Specify the position of the menu by geometry specification, I<GEOMETRY>.

When only an C<x> and C<y> position is specified in I<GEOMETRY> (see
L<XParseGeometry(3)>), the upper left corner of the pop-up is positioned
at the specified point.

When C<x> and C<y> and C<width> and C<height> are specified in
I<GEOMETRY> (see L<XParseGeometry(3)>), the geometry is interpreted as a
button alongside which the pop-up should be positioned as though the
button were a menu button.

To locate the menu user a button that was pressed in, for example, an
external panel, where the button has the geometry C<55x20+30+0>, specify
the B<--where='55x20+30+0'> option.  This will property position the
menu under the button.

=back

When unspecified, the default is C<default>.

=item B<-k>, B<--key> [I<KEY>]:[I<KEY>]

=item B<--order>, B<-O> [I<ORDERTYPE>]

Specify the order of the windows in the cycle list.  The I<ORDERTYPE>
specifies which windows to cycle through and the order in which to
cycle.  The windows in the cycle list can also be adjusted using the
B<--all-monitors>, B<--all-workspaces>, B<--hidden> and B<--minimized>
options.  The I<ORDERTYPE> can be one of the following:

=over

=item C<default>

The program will detect both cycling using the client list
(B<_NET_CLIENT_LIST> or equivalent) as well as cycling using the
stacking order client list (B<_NET_CLIENT_LIST_STACKING> or equivalent).

=item C<client>

Cycle through the windows in the client list in client order.  The
program will only detect cycling using the client list
(B<_NET_CLIENT_LIST> or equivalent).  See also the B<--group> option.

=item C<stacking>

Cycle through the windows in the client list in stacking order.  The
program will only detect cycling using the stacking order client list
(B<_NET_CLIENT_LIST_STACKING> or equivalent).  See also the B<--group>
option.

=back

When unspecified, the I<ORDERTYPE> defaults to C<default>.

=item B<-c>, B<--cycle>

=item B<--normal>

When listing hidden and minimized windows, also list normal windows.
The default when B<--hidden> and B<--minimized> options are not
specified is to list normal windows; when either B<--hidden> or
B<--minimized>, or both, are specified, the default is to not list
normal windows.

=item B<--hidden>

Also list and detect hidden windows when cycling.  The default is to
skip hidden windows.

=item B<-m>, B<--minimized>

Also list and detect minimized windows when cycling.  The default is to
skip minimized windows.

=item B<--all-monitors>

When cycling windows, also cycle through windows displayed on monitors
other than the current monitor.  This includes windows on workspaces
that are currently visible on a monitor.

=item B<--all-workspaces>

When cycling windows, also cycle through windows displayed on workspaces
other than the current one.  As windows are cycled, the current
workspace may change as windows from other workspaces are cycled.

=item B<-n>, B<--noactivate>

=item B<--raise>

=item B<-R>, B<--restore>

=item B<-y>, B<--trayicon>

=item B<-e>, B<--editor>

=item B<--group>, B<-G> [I<GROUPTYPE>]

Specify the grouping of the windows in the cycle list.  The I<GROUPTYPE>
specifies the grouping of windows for cycling, and can be one of the
following:

=over

=item C<none>

Do not group the windows in the cycle list, simply list them in the
order specified by B<--order>.

=item C<workspace>

Groups the windows in the cycle list.

=item C<monitor>

=back

=back

=head1 ENVIRONMENT

=head1 SIGNALS

=head1 CONFIGURATION

=head1 BEHAVIOUR

=head1 WINDOW MANAGERS

B<xde-cycle> supports the full range of window managers supported by the
L<XDE(3)> suite.  It should work well on stacking, non-virtual root,
re-parenting, EWMH/NetWM compliant window managers; however, not that
many window managers have issues in this regard.  Supported window
managers include:

=over

=item L<2bwm(1)>

=item L<adwm(1)>

=item L<aewm(1)>

=item L<aewm++(1)>

=item L<afterstep(1)>

=item L<awesome(1)>

=item L<blackbox(1)>

=item L<bspwm(1)>

=item L<ctwm(1)>

=item L<cwm(1)>

=item L<dtwm(1)>

=item L<dwm(1)>

=item L<echinus(1)>

=item L<etwm(1)>

=item L<failsafewm(1)>

=item L<fluxbox(1)>

=item L<flwm(1)>

=item L<fvwm(1)>

=item L<glasswm(1)>

=item L<goomwwm(1)>

=item L<herbstluftwm(1)>

=item L<i3(1)>

=item L<icewm(1)>

=item L<jwm(1)>

=item L<larswm(1)>

=item L<matwm2(1)>

=item L<metacity(1)>

=item L<mvwm(1)>

=item L<mwm(1)>

=item L<openbox(1)>

=item L<pekwm(1)>

=item L<perlpanel(1)>

=item L<spectrwm(1)>

=item L<twm(1)>

=item L<uwm(1)>

=item L<velox(1)>

=item L<vtwm(1)>

=item L<waimea(1)>

=item L<wind(1)>

=item L<wm2(1)>

=item L<wmaker(1)>

=item L<wmii(1)>

=item L<wmx(1)>

=item L<xdwm(1)>

=item L<yeahwm(1)>

=back

=head1 USAGE

B<xde-cycle> currently uses F<libwnck+> or F<libwnck> both to identify
the window manager and to provide the window cycling menu.  The range
and format of window cycling provided by F<libwnck+> is superior to
F<libwnck>.  This use means that B<xde-cycle> does not currently provide
any support for window managers that do not have a modicum of compliance
to the EWMH/NetWM specifications.  That may change in the future.

=head1 HISTORY

I wrote B<xde-cycel> primarily for the L<adwm(1)> window manager (and
variations of L<dwm(1)>) that do not support a window cycling menu of
their own.  Existing window cycling menus associated with panels (and
typically provided by F<libwnck>) do not support the special features
associated with tagging and tiling window managers.

=head1 AUTHOR

Brian Bidulock L<mailto:bidulock@openss7.org>.

=head1 SEE ALSO

L<getopt_long_only(3)>,
L<xde-ctools(1)>
L<xde-keys(1)>

=cut

# vim: set sw=4 tw=72 nocin spell
