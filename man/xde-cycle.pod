=pod

=head1 NAME

xde-cycle - window cycling for XDE

=head1 SYNOPSIS

B<xde-cycle> [I<OPTIONS>]

=head1 DESCRIPTION

Provides keyboard-based window cycling for window managers that do not
provide cycling themselves or for those that provide an inferior one.
The window cycling list is a list of windows on the current monitor (or
multiple monitors) and current workspace (or multiple workspaces) and is
accessed with a hot key.

=head1 OPTIONS

B<xde-cycle> accepts the following options:

=head2 COMMAND OPTIONS

When specified, the following options alter the primary operating mode
of the program:

=over

=item [B<--cycle>, B<-c>]

Begin a window cycle by popping up the cycle window.  This is the normal
and default operating mode of the program.

=item B<--help>, B<-h>

Prints usage information and the current options settings and defaults
and exits.

=item B<--version>, B<-V>

Prints the version of the program and a brief copyright statement and
exits.  Parse the first line with L<awk(1)> to obtain just the version
number.

=item B<--copying>, B<-C>

Prints the long copying permission statement and exits.

=back

=head2 GENERAL OPTIONS

The following options are general options:

=over

=item B<--display>, B<-d> I<DISPLAY>

Specify the display to use (overriding the B<DISPLAY> environment
variable).  The default is the value of the B<DISPLAY> environment
variable.

=item B<--screen>, B<-s> I<SCREEN>

Specify the screen number to use when locating the current window and
workspace.  The default is either specified by the B<DISPLAY>
environment variable (which that variable specifies a screen);
otherwise, all screens will be considered.

=item B<--timestamp>, B<-T> I<TIMESTAMP>

Provides the X11 server time-stamp of the event that initiated the
window cycle.

=item B<--which>, B<-w> {B<active>|B<focused>|B<pointer>|B<select>|I<WINDOW>}

Specifies which window to use as the current window for cycling.  This
can be one of the following values (case insensitive, may be
abbreviated):

=over

=item C<active>

Use the active window (in the EWMH sense) as the current window.  This
is the window specified by the B<_NET_ACTIVE_WINDOW> property on the
root window.

=item C<focused>

Use the focused window (in the EWMH sense or simply the client with the
keyboard focus) as the current window.  This is the client with a
B<_NET_WM_STATE_FOCUSED> atom set in B<_NET_WM_STATE>, or the client
(visible client with the B<WM_STATE> property set to state C<Normal>)
that has the keyboard focus according to the X server.

If no focused client can be found (e.g. focus is on the root window),
current window selection falls back to C<active>, as described above.

=item C<pointer>

Use the client holding a pointer grab or the client or window manager
frame directly under the pointer as the current window.

=item I<WINDOW>

Specifies the XID of a window to use as the current window.

=back

When a client window cannot be found to use as the current window, no
current window is selected until the first cycle.

=item B<--id>, B<-x> I<WINDOW>

Specify the X window identifier (XID) of the EWMH/NetWM client window to
use as the current window.  Can also be specified with B<--which>.

=item B<--where>, B<-W> (B<pointer>|B<center>|B<topleft>|B<bottomright>|I<GEOMETRY>

Specifies the position of the cycle window.  This can be one of the
following values (case insensitive, may be abbreviated):

=over

=item C<pointer>

Place the northwest corner of the cycle window under the mouse pointer.

=item C<center>

Place the cycle window in the centre of the active monitor.

=item C<topleft>

Place the cycle window in the top-left corner of the active monitor.

=item C<bottomright>

Place the cycle window in the bottom-left corner of the active monitor.

=item I<GEOMETRY>

Specify the position of the menu by geometry specification, I<GEOMETRY>.

=back

When unspecified, the default is C<center>.

=item B<--hidden>

Also list hidden windows when cycling.  The default is to skip hidden
windows.

=item B<--minimized>

Also list minimized windows when cycling.  The default is to skip
minimized windows.

=item B<--all-monitors>

When cycling windows, also cycle through windows displayed on monitors
other than the current monitor.  This includes windows on workspaces
that are currently visible on a monitor.

=item B<--all-workspaces>

When cycling windows, also cycle through windows displayed on workspaces
other than the current one.  As windows are cycled, the current
workspace may change as windows from other workspaces are cycled.

=item B<--order>, B<-O> [I<ORDERTYPE>]

Specify the order of the windows in the cycle list.  The I<ORDERTYPE>
specifies which windows to cycle through and the order in which to
cycle.  The windows in the cycle list can also be adjusted using the
B<--all-monitors>, B<--all-workspaces>, B<--hidden> and B<--minimized>
options.  The I<ORDERTYPE> can be one of the following:

=over

=item C<client>

Cycle through the windows in the client list in client order.  See also
the B<--group> option.

=item C<stacking>

Cycle through the windows in the client list in stacking order.  See
also the B<--group> option.

=back

=item B<--group>, B<-G> [I<GROUPTYPE>]

Specify the grouping of the windows in the cycle list.  The I<GROUPTYPE>
specifies the grouping of windows for cycling, and can be one of the
following:

=over

=item C<none>

Do not group the windows in the cycle list, simply list them in the
order specified by B<--order>.

=item C<workspace>

Groups the windows in the cycle list.

=item C<monitor>

=back

=back

=head1 ENVIRONMENT

=head1 SIGNALS

=head1 CONFIGURATION

=head1 BEHAVIOUR

=head1 WINDOW MANAGERS

B<xde-cycle> supports the full range of window managers supported by the
L<XDE(3)> suite.  It should work well on stacking, non-virtual root,
re-parenting, EWMH/NetWM compliant window managers; however, not that
many window managers have issues in this regard.  Supported window
managers include:

=over

=item L<2bwm(1)>

=item L<adwm(1)>

=item L<aewm(1)>

=item L<aewm++(1)>

=item L<afterstep(1)>

=item L<awesome(1)>

=item L<blackbox(1)>

=item L<bspwm(1)>

=item L<ctwm(1)>

=item L<cwm(1)>

=item L<dtwm(1)>

=item L<dwm(1)>

=item L<echinus(1)>

=item L<etwm(1)>

=item L<failsafewm(1)>

=item L<fluxbox(1)>

=item L<flwm(1)>

=item L<fvwm(1)>

=item L<glasswm(1)>

=item L<goomwwm(1)>

=item L<herbstluftwm(1)>

=item L<i3(1)>

=item L<icewm(1)>

=item L<jwm(1)>

=item L<larswm(1)>

=item L<matwm2(1)>

=item L<metacity(1)>

=item L<mvwm(1)>

=item L<mwm(1)>

=item L<openbox(1)>

=item L<pekwm(1)>

=item L<perlpanel(1)>

=item L<spectrwm(1)>

=item L<twm(1)>

=item L<uwm(1)>

=item L<velox(1)>

=item L<vtwm(1)>

=item L<waimea(1)>

=item L<wind(1)>

=item L<wm2(1)>

=item L<wmaker(1)>

=item L<wmii(1)>

=item L<wmx(1)>

=item L<xdwm(1)>

=item L<yeahwm(1)>

=back

=head1 USAGE

B<xde-cycle> currently uses F<libwnck+> or F<libwnck> both to identify
the window manager and to provide the window cycling menu.  The range
and format of window cycling provided by F<libwnck+> is superior to
F<libwnck>.  This use means that B<xde-cycle> does not currently provide
any support for window managers that do not have a modicum of compliance
to the EWMH/NetWM specifications.  That may change in the future.

=head1 HISTORY

I wrote B<xde-cycel> primarily for the L<adwm(1)> window manager (and
variations of L<dwm(1)>) that do not support a window cycling menu of
their own.  Existing window cycling menus associated with panels (and
typically provided by F<libwnck>) do not support the special features
associated with tagging and tiling window managers.

=head1 AUTHOR

Brian Bidulock L<mailto:bidulock@openss7.org>.

=head1 SEE ALSO

L<getopt_long_only(3)>,
L<xde-ctools(1)>
L<xde-keys(1)>

=cut

# vim: set sw=4 tw=72 nocin spell spelllang=en_ca:
