=pod

=head1 NAME

xde-pager - desktop cycling for XDE

=head1 SYNOPSIS

B<xde-pager> [I<OPTIONS>]

=head1 DESCRIPTIONS

Provides desktop cycling feedback for window managers that do not
provide desktop cycling feedback themselves or for those that provide an
inferior feedback.  The desktop cycling feedback is a pager where each
cell corresponds to a workspace on the current monitor (or multiple
monitors).  The feedback pop-up can also have a desktop selected using
the mouse.

=head1 OPTIONS

B<xde-pager> accepts the following options:

=head2 COMMAND OPTIONS

When specified, the following options alter the primary operating mode
of the program:

=over

=item I<unspecified>

When no command option is specified, the default is to run the pager
without replacing an existing instance.  It is an error if an instance
is currently running.

=item B<--replace>, B<-r>

Run the pager, but replace a running instance of B<xde-pager>.  It is
not an error when no instance is currently running.

=item B<--restart>, B<-S>

As a running instance to restart.  It is an error if there is no
instance currently running.  This is useful when the binary has been
upgraded.

=item B<--quit>, B<-q>

Ask a running instance of B<xde-pager> to quit.  It is not an error if
no instance is currently running.

=item B<--help>, B<-h>

Prints usage information and the current options settings and defaults
and exits.

=item B<--version>, B<-V>

Prints the version of the program and a brief copyright statement and
exits.  Parse the first line with L<awk(1)> to obtain just the version
number.

=item B<--copying>, B<-C>

Prints the long copying permission statement and exits.

=back

=head2 GENERAL OPTIONS

The following options are general options:

=over

=item B<--display>, B<-d> I<DISPLAY>

Specify the display to use (overriding the B<DISPLAY> environment
variable).  The default is the value of the B<DISPLAY> environment
variable.

=item B<--screen>, B<-s> I<SCREEN>

Specify the screen number to use when locating the current window and
workspace.  The default is either specified by the B<DISPLAY>
environment variable (when that variable specifies a screen);
otherwise, all screens will be considered.

=item B<--timeout>, B<-t> I<TIMEOUT>

When cycling the desktops with the mouse or other than a modified
keystroke, or if a key is pressed that does not result in a desktop
change, the feedback window will persist for I<TIMEOUT> milliseconds.
The default is 1000 (or 1 second).

=item B<--border>, B<-B> I<WIDTH>

Places a border around the pager of I<WIDTH> pixels.  The default is 5
pixels.

=item B<--proxy>, B<-p>

Normally the pager will translate scroll wheel events received on a
B<_WIN_DESKTOP_BUTTON_PROXY> window into desktop changes.  As other
programs (such as a desktop) may also be doing so, this option causes
the pager to consider the desktop button proxy.

=item B<--button>, B<-b> I<BUTTON>

Specifies the button that was used to invoke the pop-up.  Defaults to
zero (0).  This should be the button that was used to pop the pager.  A
window manager that invokes this command in response to a button press
should release its passive grab on the button before invoking the pager
so that the popped up menu can grab the button.  A I<BUTTON> of zero (0)
means that the program was invoked with a key-press instead of a button.

=item B<--pointer>, B<-P>

An alternate way of specifying B<--button>=1.

=item B<--keyboard>, B<-K>

An alternate way of specifying B<--button>=0.

=item B<--timestamp>, B<-T> I<TIMESTAMP>

Provides the X11 server time-stamp of the event that caused the pop-up.

=item B<--verbose>, B<-v> [I<LEVEL>]

Print extra information on standard error while running.  When
I<LEVEL> is not specified, simply increments the output verbosity;
otherwise, the output verbosity is set to I<LEVEL>.

=item B<--debug>, B<-D> [I<LEVEL>]

Print debugging information on standard error while running.  When
I<LEVEL> is not specified, simply increments the debug level; otherwise,
the debug level is set to I<LEVEL>.

=back

=head2 SESSION MANAGEMENT OPTIONS

X session management options are not used by another user other than the
X11 Session Manager.  The following options are used by X session
management:

=over

=item B<-clientId> I<CLIENTID>

Specifies the X Session Management client identifier of the previously
running session of B<xde-winlist>.

=item B<-restore> I<SAVEFILE>

Specifies the X Session Management filename of a file to which to save
session information.

=back

=head1 USAGE

B<xde-pager> currently uses F<libwnck+> or F<libwnck> to detect
workspace changes and to provide the pager feedback, so the window
manager must support some modicum of EWMH/NetWM compliance for the
feedback to be effective.  Eventually I might make F<libwnkc+> support
GNOME1/WinWM, OSF/Motif and even just ICCCM compliant window managers,
but, for now, some EWMH/NetWM compliance is needed.

Run B<xde-pager> in the background or launch using the supplied XDG
autostart file.  The program takes the following steps:

=over

=item 1.

Waits for a desktop change as signalled by a change to
B<_NET_CURRENT_DESKTOP> on the root window of any screen.

=item 2.

When the desktop changes, the program grabs the pointer and the
keyboard.  If there is a keyboard modifier down, it displays the
feedback window and proxies key presses and releases to the root window.  
When all modifiers are released or when a selection is made or its
pointer grab is broken, it drops the feedback window and waits for
another desktop change.

While the feedback pop-up is displayed, the mouse can be used to select
a desktop.  When selected the window will not drop until the mouse
leaves the pop-up, a modifier is released, or a key press is made that
does not result in a desktop change.

=back

=head2 WINDOW MANAGERS

=over

=item L<2bwm(1)>

is supported and works well.

=item L<adwm(1)>

is supported and works well.

=item L<aewm(1)>

L<aewm(1)> does not really support desktops and is, therefore, not
supported.  (Well, it does.)

=item L<aewm++(1)>

L<aewm++(1)> is barely ICCCM compliant.  It does not really support
desktops and is, therefore, not supported.

=item L<afterstep(1)>

L<afterstep(1)> provides both workspaces and view ports (large desktops).
F<libwnck+> does not support these well, so when B<xde-pager> detects
that it is running under L<afterstep(1)> it does nothing.  (It has a
desktop button proxy, but it does not relay scroll wheel events by
default.)

=item L<awesome(1)>

is supported and works well.

=item L<blackbox(1)>

is supported and works well.

=item L<bspwm(1)>

is supported and works well.

=item L<ctwm(1)>

L<ctwm(1)> is only GNOME/WinWM compliant and is not yet supported by
F<libwnck+>.  B<xde-pager> mitigates this to some extent; however, use
L<etwm(1)> instead.

=item L<cwm(1)>

L<cwm(1)> is supported, but it doesn't work that well because L<cwm(1)>
is not placing B<_NET_WM_STATE> on client windows, so F<libwnck+> cannot
locate them and will not provide contents in the pager.

=item L<dtwm(1)>

L<dtwm(1)> is only OSF/Motif compliant and does support multiple
desktops; however, F<libwnck+> does not yet support OSF/Motif/CDE.

=item L<dwm(1)>

L<dwm(1)> is barely ICCCM compliant.  It is not supported.

=item L<echinus(1)>

is supported and works well.

=item L<etwm(1)>

is supported and works well.

=item L<failsafewm(1)>

L<failsafewm(1)> has no desktops.

=item L<fluxbox(1)>

is supported and works well.

=item L<flwm(1)>

L<flwm(1)> supports GNOME/WinWM but not EWMH/NetWM and is not currently
supported by F<libwnck+>.  B<xde-pager> mitigates this to some extent.

=item L<fvwm(1)>

is supported and works well.  L<fvwm(1)> provides a desktop
button proxy but it needs the B<--noproxy> option.  Viewports work
better than on L<afterstep(1)> and behaviour is predictable.

=item L<glasswm(1)>

L<glasswm(1)> provides some window control atoms of its own; however,
B<xde-pager> does not support these at this time.

=item L<goomwwm(1)>

L<goomwwm(1)> does not provide workspace cycling feedback of its own.
L<goomwwm(1)> is supported and should work well.

=item L<herbstluftwm(1)>

is supported and works well.

=item L<i3(1)>

L<i3(1)> is supported; however,  L<i3(1)> does not support
B<_NET_NUMBER_OF_DESKTOPS>, so only the current desktop is shown at any
given time, which makes it less effective.  (This may have been fixed in
current versions of L<i3(1)>).

=item L<icewm(1)>

L<icewm(1)> provides its own pager on the panel, but does respect
B<_NET_DESKTOP_LAYOUT> in some versions.  Although a desktop button
proxy is provided, older versions of L<icewm(1)> will not proxy
button events sent by the pager.  Use the version at
L<https://github.com/bbidulock/icewm> for best results.

=item L<jwm(1)>

L<jwm(1)> provides its own pager on the panel, but does not respect or
set B<_NET_DESKTOP_LAYOUT>, and key bindings are confused.
When B<xde-pager> detects that it is running under L<jwm(1)> it will
simply do nothing.

=item L<larswm(1)>

L<larswm(1)> is barely ICCCM compliant and is, therefore, not supported.

=item L<matwm2(1)>

is supported and works well.

=item L<metacity(1)>

L<metacity(1)> provides its own competent desktop switching feedback
pop-up.
When B<xde-pager> detects that it is running under L<metacity(1)> it
will simply do nothing.

=item L<mvwm(1)>

is supported and works well.  L<mvwm(1)> provides a desktop
button proxy but it needs the B<--noproxy> option.  View ports work
better than on L<afterstep(1)> and behaviour is predictable.

=item L<mwm(1)>

L<mwm(1)> only supports OSF/Motif and does not support multiple
desktops.  Is is not supported.

=item L<openbox(1)>

L<openbox(1)> provides its own meager desktop switching feedback pop-up.
It does respect B<_NET_DESKTOP_LAYOUT> but does not provide any of the
contents of the desktop.  When both are running it is a little
confusing, so when B<xde-pager> detects that it is running under
L<openbox(1)> it will simply do nothing.

=item L<pekwm(1)>

L<pekwm(1)> provides its own broken desktop switching feedback pop-up;
however, it does not respect B<_NET_DESKTOP_LAYOUT> and key bindings are
confused.
When B<xde-pager> detects that it is running under L<pekwm(1)> it will
simply do nothing.

=item L<spectrwm(1)>

L<spectrwm(1)> is supported, but it doesn't work that well because, like
L<cwm(1)>, L<spectrwm(1)> is not placing B<_NET_WM_STATE> on client
windows, so F<libwnck+> cannot locate them and will not provide contents
in the pager.  This may have been fixed in more current versions of
L<spectrwm(1)>.

=item L<twm(1)>

L<twm(1)> does not support multiple desktops and is unsupported.

=item L<uwm(1)>

is supported and works well.

=item L<velox(1)>

is untested.

=item L<vtwm(1)>

L<vtwm(1)> is barely ICCCM compliant and currently unsupported: use
L<etwm(1)> instead.

=item L<waimea(1)>

is supported; however, waimea defaults to triple-sized large desktops
in a 2x2 arrangement.  With large virtual desktops F<libwnck+> gets
confused just as with L<afterstep(1)>.  L<fvwm(1)> must be doing
something right.  It appears to be B<_NET_DESKTOP_VIEWPORT>, which is
supposed to be set to the viewport position of each desktop (and isn't).
Use the waimea at L<https://github.com/bbidulock/waimea> for a corrected
version.

=item L<wind(1)>

is supported and works well.

=item L<wm2(1)>

L<wm2(1)> is barely ICCCM compliant and currently unsupported: use its
L<wmx(1)> derivative.

=item L<wmaker(1)>

is supported and works well.

=item L<wmii(1)>

is supported and works well.  L<wmii(1)> was stealing the focus back
from the pop-up, but this was fixed.

=item L<wmx(1)>

is supported and works well.

=item L<xdwm(1)>

L<xdwm(1)> does not support EWMH/NetWM for desktops.

=item L<yeahwm(1)>

L<yeahwm(1)> does not support EWMH/NetWM and is currently unsupported.
The pager will simply not do anything while this window manager is
running.

=back

=head1 ENVIRONMENT

The following environment variables are considered by the program:

=over

=item B<SESSION_MANAGER>

Specifies the list of transport connections on which to contact the
session manager.

=item B<SM_SAVE_DIR>

Specifies the directory in which to save session files.  When unset, the
directory defaults to the user's home directory.

=back

=head1 HISTORY

I wrote this program particularly for use with L<adwm(1)> and other
tiling window managers that provide no feedback for desktop changes and
do not typically run well with a panel or pager.  It provides workspace
change feedback without taking up valuable screen real-estate while the
workspace is not changing.  Also, when used with F<libwnck+>, the pager
is multiple-monitor aware and can handle per-monitor tagged workspaces.

=head1 AUTHOR

Brian Bidulock L<mailto:bidulock@openss7.org>.

=head1 SEE ALSO

L<getopt_long_only(3)>,
L<xde-ctools(1)>
L<xde-keys(1)>

=cut

# vim: set sw=4 tw=72 nocin spell spelllang=en_ca:
