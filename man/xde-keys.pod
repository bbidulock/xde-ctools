=pod

=head1 NAME

xde-keys - key bindings for XDE

=head1 SYNOPSIS

B<xde-keys> [I<OPTIONS>]

=head1 DESCRIPTION

Provides generic key binding management for window managers that do not
provide key bindings themselves or for those that provide a inferior or
incomplete set of bindings.  Key bindings are hot keys bound to the root
window that invoke actions on windows, workspaces, the window manager,
or other aspect of the system.

=head1 OPTIONS

B<xde-keys> accepts the following options:

=head2 COMMAND OPTIONS

When specified, the following options alter the primary operating mode
of the program:

=over

=item B<--replace>, B<-r>

Normally, B<xde-keys> will refuse to run when another instance of the
program is running on the display.  This option can be used to replace a
running instance when one is found.

=item B<--quit>, B<-q>

Used to ask a running instance of B<xde-keys> to quit.

=item B<--edit>, B<-e>

Used to invoke the key binding editor on the running instance, or, when
a running instance does not exist, simply launches the key binding
editor.  The key binding editor is a graphical dialog that can be used
to interactively edit the key bindings for the current user.

=item B<--help>, B<-h>

Prints usage information and the current options settings and defaults
and exits.

=item B<--version>, B<-V>

Prints the version of the program and a brief copyright statement and
exits.  Parts the first line with L<awk(1)> to obtain just the version
number.

=item B<--copying>, B<-C>

Prints the long copying permission statement and exits.

=back

The default when no command options are specified is to simply run the
program.

=head2 GENERAL OPTIONS

The following are more general options:

=over

=item B<--display>, B<-d> I<DISPLAY>

Specify the display to use (overriding the B<DISPLAY> environment
variable).  The default is the value of the B<DISPLAY> environment
variable.

=item B<--screen>, B<-s> I<SCREEN>

Only bind to the root window of the specified screen.

=item B<--nowait>, B<-n>

Do not wait for a window manager to appear before performing key
bindings.  The default behaviour is to wait for a window manager to
appear before binding keys.

When started before a window manager, if global key bindings are taken
that conflict with those defined for the window manager, the window
manager will fail to obtain its key bindings.  Some window manager just
drudge along if this happens, others complain about being able to bind,
and for each key!  If you want to override the window manager key
bindings, set this option.

Otherwise, when this option is specified, the window manager will obtain
its key bindings first and then only those that are undefined will be
bound by B<xde-keys>.  This can be important because some window
managers bind keys that perform actions that would otherwise be
impossible for B<xde-keys> to perform.

=item B<--delay>, B<-W> I<MILLISECONDS>

When B<--nowait> is not set, specifies the interval of time in
milliseconds to wait after the window manager appears before attempting
to bind keys.  Some ICCCM 2.0 compliant window managers advertise their
presence (by sending a MANAGER client message) before obtaining additional
resources such as key bindings.  This delay is intended to permit the
window manager to obtain its key bindings after it has advertised its
presence.  The default is 250 milliseconds.

=item B<--profile>, B<-P> I<PROFILE>

Specify a profile name to use.  Normally the profile name is derived
from the name of the window manager running; however, when the
B<--nowait> option is used and B<xde-keys> is started before the window
manager, it cannot determine the specific profile for the window
manager until it appears.

=item B<--file>, B<-f> I<FILENAME>

Do not look up the profile but, instead, use the key bindings specified
in the file, I<FILENAME>.

=item B<--gconf>, B<-g>

Do not read a configuration file, but use the key binding settings
specified for the GNOME desktop in the F<gconf> database.

=item B<--write>, B<-w>

Write the key binding configuration read from files to the F<gconf>
database.

=item B<--verbose>, B<-v> [I<LEVEL>]

Print extra information on standard error while running.  When
I<LEVEL> is not specified, simply increments the output verbosity;
otherwise, the output verbosity is set to I<LEVEL>.

=item B<--debug>, B<-D> [I<LEVEL>]

Print debugging information on standard error while running.  When
I<LEVEL> is not specified, simply increments the debug level; otherwise,
the debug level is set to I<LEVEL>.

=back

=head2 SESSION OPTIONS

Session options are only useful to the session manager and need not be
specified directly by the user.  When specified, these options will be
used to restore the profile from a previous session.

=over

=item B<--clientId> I<CLIENTID>

Specifies the client identifier that was assigned to B<xde-keys> in the
previous session that is being restored.

=item B<--saveFile> I<SAVEFILE>

Specifies the location of the file that was used to save state of the
previous session.

=back

=head1 USAGE

B<xde-keys> currently uses F<libwnck+> or F<libwnck> to detect window
managers and window manager changes, so the window manager should
support some modicum of EWMH/NetWM compliance for the key binder to
work.  Nevertheless, no standard other than bare ICCCM supports many key
actions, so the lack of an EWMH/NetWM compliant window manager severely
reduces the ability of B<xde-keys> anyway.

B<xde-keys> is intended to attempt its key bindings after the window
manager and any autostart programs have already run.  This is so that
the window manager or autostart programs will not fail if they are
unable to obtain their key bindings.

Run B<xde-keys> in the background or launch it using the supplied XDG
autostart file.  The program takes the following steps:

=over

=item 1.

Waits for a window manager to appear unless the B<--nowait> option has
been specified.  Waits the interval specified by the B<--delay> option
before proceeding. Note that this delay is intended to allow
auto-starting applications to bind keys before B<xde-keys> attempts to
bind those keys.  (Most applications complain or event fail when they
cannot bind the proper keys; however, B<xde-keys> is more forgiving and)
just complains to F<stderr>.)

=item 2.

Determines the profile using the B<--profile> option or by taking the
window manager name and folding it to uppercase.  Reads the
configuration associated with the profile.  When B<--gconf> is
specified, read the F<gconf> database instead.  When B<--write> is
specified, write the resulting configuration to the F<gconf> database.

=item 3.

Proceeds to bind each key action that is defined by the profile and
supported by the window manager, or supported by the system in general.

=item 4.

Waits in the background for keystrokes and performs the actions
associated with the keystroke.  If the program detects that the window
manager has changed, it will restart the process at step (1).

=back

=head1 CONFIGURATION

The configuration file format is a standard X Resource Management file
with the resource names listed in the table that follows.  (Note that
the resources names are the same as the field names of the
F<org.gnome.desktop.wm.keybinds> resources.)

=head2 SYNTAX

The general syntax of key commands, as specified directly in the
B<xde-keys> resource file, is as follows:

=over

=item I<E<lt>resourceE<gt>> = C<XDE-Keys*>I<E<lt>commandE<gt>>C<:> I<E<lt>listE<gt>>

Resources are specified using standard X resource file notation and
syntax.

=item I<E<lt>listE<gt>> = I<E<lt>bindingE<gt>> [C<,> I<...>]

A list of one or more key values, separated by commas.  The list
represents the list of key bindings associated with the I<E<lt>commandE<gt>>.
Each I<E<lt>bindingE<gt>> in the list represents a single key binding to
the I<E<lt>commandE<gt>> with arguments.

=item I<E<lt>bindingE<gt>> = I<E<lt>chainE<gt>> [C<=> I<E<lt>argsE<gt>>]

A key chain followed by an optional equal-sign and key arguments list.
The I<E<lt>chainE<gt>> specifies the sequence of key presses necessary
to invoke the I<E<lt>commandE<gt>>, and the I<E<lt>argsE<gt>> specify
the arguments to command that are associated with this key binding,
described for each I<E<lt>commandE<gt>>, below, under L<COMMANDS>.

=item I<E<lt>argsE<gt>> = I<E<lt>argE<gt>> [C< > I<...>]

A list of key arguments separated by spaces.  The number and role of
arguments is specific to the
I<E<lt>commandE<gt>>.

=item I<E<lt>argE<gt>>

A key argument.  Key arguments cannot contain comma, colon nor space
characters.

=item I<E<lt>chainE<gt>> = I<E<lt>specE<gt>>[C<:> I<...>]

A list of one ore more key specifications, separated by colons.  Each
I<E<lt>specE<gt>> specifies a keypress combination that must be
performed in sequence to cause the
I<E<lt>commandE<gt>>
action to be performed.

=over

=item Example:

I<W + w : h>

=back

=item I<E<lt>specE<gt>> = [I<E<lt>modifiersE<gt>> C<+>] I<E<lt>symbolE<gt>>

An optional set of modifiers and a plus-sign, followed by a key symbol.
The 
I<E<lt>symbolE<gt>>
is the name of the key symbol;
I<E<lt>modifiersE<gt>>
is a string of characters specifying key modifiers.

=item I<E<lt>symbolE<gt>>

An X11 key symbol.

=item I<E<lt>modifiersE<gt>>

A string containing one or more of the following characters:

=over

=item C<A>

The Alt key.

=item C<C>

The Control key.

=item C<S>

The Shift key.

=item C<W>

The Windows key.

=item C<M>

The Mod key.
This key is definable using the C<modkey> resource and defaults to the
Alt key.

=item C<N>

The not-Mod key. When C<modkey> is defined to C<A>, this is the same as
C<W>; otherwise, the other way around.

=back

=back

Note that whitespace is optional (except in the arguments list where
aguments are separated by spaces).

The following is an example of vim-like window key movement key chains:

    XDE-Keys*move-to-side-w:  W+w:H, CS+w:h
    XDE-Keys*move-to-side-n:  W+w:J, CS+w:j
    XDE-Keys*move-to-side-s:  W+w:K, CS+w:k
    XDE-Keys*move-to-side-e:  W+w:L, CS+w:l

=head2 COMMANDS

The commands are described below.  Each heading provides the format of
the command resource (without the C<XDE-Keys*> portion) and the possible
arguments to each key binding.

The possible I<E<lt>commandE<gt>> values and arguments are as follows:

=over

=item B<activate-window-menu>

Pop the window menu.  B<xde-keys> does not provide a window menu of its
own, but invokes L<xde-winlist(1)>.

=item B<begin-move>

Starts a keyboard move.  Once the keyboard move has begun, the arrow
keys (or hjkl keys) are used to move the window.  The escape key or
enter key can be used to complete the move.

=item B<begin-resize>

Starts a keyboard resize.  Once the keyboard resize has begun, the arrow
keys (or hjkl keys) are used to resize the window.  The escape key or
enter key can be used to complete the resize.

=item B<close>

Closes the active window.

=item B<cycle-group>

Cycles forward through the group of widows to which the active group
belongs.

=item B<cycle-group-backward>

Cycles backward through the group of windows to which the active group
belongs.

=item B<cycle-panels>

Cycle the selection through the available panels and docks in the
forward direction.

=item B<cycle-panels-backward>

Cycle the selection through the available panels and docks in the
reverse direction.

=item B<cycle-windows>

Cycle through the windows on the current desktop in the forward
direction.

=item B<cycle-windows-backward>

Cycle through the windows on the current desktop in the reverse
direction.

=item B<lower>

Lower the currently active window.

=item B<maximize-horizontally>

Maximize the currently active window in the horizontal direction. 

=item B<maximize>

Maximize the currently active window in the both the vertical and
horizontal directions.

=item B<maximize-vertically>

Maximize the currently active window in the vertical direction. 

=item B<minimize>

Minimize (iconify) the active window.

=item B<move-to-center>

Move the active window to the centre of the screen.

=item B<move-to-corner-ne>

Move the active window to the NE corner of the screen.

=item B<move-to-corner-nw>

Move the active window to the NW corner of the screen.

=item B<move-to-corner-se>

Move the active window to the SE corner of the screen.

=item B<move-to-corner-sw>

Move the active window to the SW corner of the screen.

=item B<move-to-side-e>

Move the active window to the E side of the screen.

=item B<move-to-side-n>

Move the active window to the N side of the screen.

=item B<move-to-side-s>

Move the active window to the S side of the screen.

=item B<move-to-side-w>

Move the active window to the W side of the screen.

=item B<move-to-workspace-1>

Move the active window to workspace #1 (if it exists).

=item B<move-to-workspace-2>

Move the active window to workspace #2 (if it exists).

=item B<move-to-workspace-3>

Move the active window to workspace #3 (if it exists).

=item B<move-to-workspace-4>

Move the active window to workspace #4 (if it exists).

=item B<move-to-workspace-5>

Move the active window to workspace #5 (if it exists).

=item B<move-to-workspace-6>

Move the active window to workspace #6 (if it exists).

=item B<move-to-workspace-7>

Move the active window to workspace #7 (if it exists).

=item B<move-to-workspace-8>

Move the active window to workspace #8 (if it exists).

=item B<move-to-workspace-9>

Move the active window to workspace #9 (if it exists).

=item B<move-to-workspace-10>

Move the active window to workspace #10 (if it exists).

=item B<move-to-workspace-11>

Move the active window to workspace #11 (if it exists).

=item B<move-to-workspace-12>

Move the active window to workspace #12 (if it exists).

=item B<move-to-workspace-down>

Move the active window to the workspace below the current workspace (if
it exists).

=item B<move-to-workspace-left>

Move the active window to the workspace to the left of the current
workspace (if it exists).

=item B<move-to-workspace-right>

Move the active window to the workspace to the right of the current
workspace (if it exists).

=item B<move-to-workspace-up>

Move the active window to the workspace above the current workspace (if
it exists).

=item B<panel-main-menu>

Pop the main menu from the panel.  B<xde-keys> does not provide a panel
main menu of its own, but invokes L<xde-menu(1)> instead.

=item B<panel-run-dialog>

Pop an execution dialog from the panel.  B<xde-keys> does not provide an
execution dialog of its own, but invokes L<xde-run(1)> or L<xde-app(1)>
instead.

=item B<raise-or-lower>

If the active window is above any other window on the stack, lower it to
the bottom; below any other window on the stack; raise it.

=item B<raise>

Raise the active window to the top of the stack.

=item B<set-spew-mark>

???????? I have no idea at the moment ????????

=item B<show-desktop>

Place the window manager into showing the desktop mode (if not already
in that mode); otherwise, cease the showing the desktop mode.

=item B<switch-applications>

=item B<switch-applications-backward>

=item B<switch-group>

=item B<switch-group-backward>

=item B<switch-input-source>

=item B<switch-input-source-backward>

=item B<switch-panels>

=item B<switch-panels-backward>

=item B<switch-to-workspace-1>

Change to workspace #1 (if it exits).

=item B<switch-to-workspace-2>

Change to workspace #2 (if it exits).

=item B<switch-to-workspace-3>

Change to workspace #3 (if it exits).

=item B<switch-to-workspace-4>

Change to workspace #4 (if it exits).

=item B<switch-to-workspace-5>

Change to workspace #5 (if it exits).

=item B<switch-to-workspace-6>

Change to workspace #6 (if it exits).

=item B<switch-to-workspace-7>

Change to workspace #7 (if it exits).

=item B<switch-to-workspace-8>

Change to workspace #8 (if it exits).

=item B<switch-to-workspace-9>

Change to workspace #9 (if it exits).

=item B<switch-to-workspace-10>

Change to workspace #10 (if it exits).

=item B<switch-to-workspace-11>

Change to workspace #11 (if it exits).

=item B<switch-to-workspace-12>

Change to workspace #12 (if it exits).

=item B<switch-to-workspace-down>

Change to the workspace below the current workspace (if it exits).

=item B<switch-to-workspace-left>

Change to the workspace to the left of the current workspace (if it exits).

=item B<switch-to-workspace-right>

Change to the workspace to the right of the current workspace (if it exits).

=item B<switch-to-workspace-up>

Change to the workspace above the current workspace (if it exits).

=item B<switch-windows>

=item B<switch-windows-backward>

=item B<toggle-above>

Toggle whether the active window is placed above other windows.

=item B<toggle-fullscreen>

Toggle whether the active window is full-screen or not.

=item B<toggle-maximized>

Toggle whether the active window is maximized or not.

=item B<toggle-on-all-workspaces>

Toggle whether the active window is shown on all workspaces or just one.

=item B<toggle-shaded>

Toggle whether the active window is shaded or not.

=item B<unmaximize>

Restore the active window to its normal size and position.

=back

The following are from F<org.gnome.mutter.keybindings>:

=over

=item B<tab-popup-cancel>

=item B<tab-popup-select>

=item B<toggle-tiled-left>

Toggle whether the window is shown tiled on the right (right-half
maximized).

=item B<toggle-tiled-right>

Toggle whether the window is shown tiled on the left (left-half
maximized).

=back

Not listed under F<org.gnome>

=over

=item B<execute-terminal>

Launch a terminal.  B<xde-keys> does not have a terminal program of its
own, so it just executes L<xde-preferred-terminal(1)>.

=item B<hide-menus>

=item B<kill>

Kills the active window.

=item B<mouse-group>

This is actually a mouse binding.

=item B<mouse-lower>

This is actually a mouse binding.

=item B<mouse-move>

This is actually a mouse binding.

=item B<mouse-resize>

This is actually a mouse binding.

=item B<mouse-tab>

This is actually a mouse binding.

=item B<mouse-viewport>

This is actually a mouse binding.

=back

=head1 HISTORY

I wrote B<xde-keys> for several reasons:

=over

=item 1.

Some window managers are incapable of providing a useful set of key
bindings (e.g. L<blackbox(1)>).

=item 2.

Some window managers are incapable of attaching more than one key
sequence to the same action.

=item 3.

Many window managers are incapable of providing key chaining.

=item 4.

Some tiling window managers only have a very limited compiled-in set of
key bindings.

=item 5.

L<bbkeys(1)>, although a good basic tool for use with the L<blackbox(1)>
window manager, has limited capabilities and extensibility.  All other
external key binders that were associated with a window manager (such as
the one for early versions of L<openbox(1)>) have stagnated and
deteriorated.

=item 6.

There are about 170 special "XF86" keys defined that are to perform
various functions, not many of which are associated with the window
manager.  Therefore, replicating these 170 bindings for each window
manager would be counter-productive.

=back

=head1 AUTHOR

Brian Bidulock L<mailto:bidulock@openss7org>.

=head1 SEE ALSO

L<getopt_long_only(3)>,
L<xde-ctools(1)>
L<xde-keys(1)>


=cut

# vim: set sw=4 tw=72 nocin spell spelllang=en_ca:
