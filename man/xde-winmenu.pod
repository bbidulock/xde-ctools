=pod

=head1 NAME

xde-winmenu - Window Actions Menu for XDE

=head1 SYNOPSIS

B<xde-winmenu> [I<OPTIONS>]

=head1 DESCRIPTION

Provides a window menu for window managers that do not provide one
themselves or as a better window menu for those that provide an inferior
one.  The window menu is a menu of actions that can be performed against
a window and is normally accessed with a hot-key, or by clicking on the
decorative border of a window, or by pressing one or more modifier keys
and clicking on the window.  B<xde-winmenu> supports all of these
activations.  See L</USAGE> and L</WINDOW MANAGERS> for more information
about activation.  For hot key activation see L<xde-keys(1)>.

=head1 OPTIONS

B<xde-winmenu> accepts the following options:

=head2 COMMAND OPTIONS

When specified, the following options alter the primary operating mode of
the program:

=over

=item [B<--popup>, B<-p>]

Post a pop-up menu.  Depending on the setting of the B<--button> option,
this will either post the pop-up menu at the current pointer position, or
centred on the window to which it corresponds.

=item B<--help>, B<-h>

Prints usage information and the current options settings and defaults
and exits.

=item B<--version>, B<-V>

Prints the version of the program and a brief copyright statement and
exits.  Parse the first line with L<awk(1)> to obtain just the version
number.

=item B<--copying>, B<-C>

Prints the long copying permissions statement and exits.

=back

=head2 GENERAL OPTIONS

The following options are general options:

=over

=item B<--display>, B<-d> I<DISPLAY>

Specify the display to use (overriding the B<DISPLAY> environment
variable).  The default is the value of the B<DISPLAY> environment
variable.

=item B<--screen>, B<-s> I<SCREEN>

Specify the screen number to use when locating the client window.  The
default is either specified by the B<DISPLAY> environment variable
(which that variable specifies a screen); otherwise, all screens will be
considered.

=item B<--button>, B<-b> I<BUTTON>

Specifies the button that was used to invoke the pop-up.  Defaults to
zero (0).  This should be the button that was used to pop the menu.  A
window manager that invokes this command in response to a button press
should release its passive grab on the button before invoking the window
menu so that the popped up menu can grab the button.  A I<BUTTON> of
zero (0) means that the program was invoked with a key-press instead of
a button.

=item B<--timestamp>, B<-T> I<TIMESTAMP>

Provides the X11 server time-stamp of the event that caused the pop-up.

=item B<--which>, B<-w> {B<active>|B<focused>|B<pointer>|B<select>}

Specifies the window for which the pop-up the menu.  This can be one of
the following values (case insensitive, may be abbreviated):

=over

=item C<active>

Popup a menu for the active window (in the EWMH sense).  This is the
window specified by the B<_NET_ACTIVE_WINDOW> property on the root
window.

=item C<focused>

Popup a menu for the focused window (in the EWMH sense or simply the
client with the keyboard focus).  This is the with a
B<_NET_WM_STATE_FOCUSED> atom set in B<_NET_WM_STATE>, or the client
(visible client with the B<WM_STATE> property set to state C<Normal>)
that has keyboard focus according to the X server.

If no focused window can be found (e.g. focus is on the root window),
window selection falls back to C<pointer> as described below.

This is the default when B<--button> is unspecified, or specified as
zero.

=item C<pointer>

Popup a menu for the client holding a pointer grab or the client
or window manager frame directly under the pointer.

This is the default when B<--button> is specified and non-zero.

=item C<select>

Select the client for which the window menu should be posted by having
the user click on the window.  Use the normal X window selection
protocol.  (This is not currently supported.)

=item I<WINDOW>

Select the window with XID, I<WINDOW>, for posting of menu.

=back

When a client window cannot be found, B<xde-winmenu> complains and
exits.

=item B<--id>, B<-x> I<WINDOW>

Specify the X window identifier (XID) of the EWMH/NetWM client window
for which to pop-up a menu.  Can also specified with B<--which>.

=item B<--where>, B<-W> {B<pointer>|B<center>|B<topleft>|B<icongeom>}

Specifies the position for the pop-up menu.  This can be one of the
following values (case insensitive, may be abbreviated):

=over

=item C<pointer>

Place the northwest corner of the menu under the mouse pointer.  This
will always succeed.  This is the default when B<--button> is specified
and non-zero.

=item C<center>

Place the menu in the center of the associated window when visible.
When not visible (minimized or hidden), defaults to C<icongeom> if there
is an icon geometry defined, otherwise, defaults to the center of the
monitor on which the window would normally appear.

=item C<topleft>

Place the menu in the top-left corner of the client window (inside any
decorative border).  When the window is not visible (minimized or
hidden), defaults to C<icongeom> if there is an icon geometry defined,
otherwise, defaults to the top left corner of the monitor in which the
window would normally appear.

=item C<icongeom>

Place the menu above or below (depending on position) the icon geometry
area.  This is the area described by the B<_NET_WM_ICON_GEOMETRY>
property on the associated window.  Note that this is the only location
that makes sense for a minimized or hidden window and is always the
first attempted position for a minimized or hidden window.  If there is
no B<_NET_WM_ICON_GEOMETRY> property, defaults to C<topleft> for the
window, followed by C<center> for the monitor.

=back

When unspecified, the default placement algorithm is as follows:

=over

=item 1.

If B<--button> is specified and non-zero, place the menu at the
pointer regardless of the window position or state.

=item 2.

If the window is unmapped (hidden or minimized) and an icon geometry
exists for the associated window, place the menu above or below the icon
geometry.

=item 3.

If the window is unmapped (hidden or minimized) and no icon geometry
exists for the associated window, place the in the center of the monitor
in which the window would normally be displayed.

=item 4.

If the window is mapped but fully or partially obscured, raise the
window and the place the menu in the top left corner of the client
window (inside the decorative border).

If the window is mapped, 

=back

=item B<--verbose>, B<-v> [I<LEVEL>]

Increases or sets the output verbosity level to I<LEVEL>.  The default
level is C<1>.  Normal output is printed to standard output.  This
option may be repeated.

=item B<--debug>, B<-D> [I<LEVEL>]

Increases or sets the debugging verbosity level to I<LEVEL>.  The
default level is C<0>.  Debugging output is printed to standard error.
This option may be repeated.

=back

=head1 USAGE

B<xde-winmenu> currently uses F<libwnck+> or F<libwnck> both to identify
the window manager and to provide the window actions menu.  The range
and format of window actions provided by F<libwnck+> is superior to
F<libwnck>.  This use means that B<xde-winmenu> does not currently
provide any support for window managers that do not have a modicum of
compliance to the EWMH/NetWM specifications.  That may change in the
future.

=head1 HISTORY

I wrote B<xde-winmenu> primarily for the L<adwm(1)> window manager (and
variations of L<dwm(1)>) that do not support a window menu of their own.
Existing window menus associated with panels (and typically provided by
F<libwnck>) do not support the special features associated with tagging
and tiling window managers.

=head1 AUTHOR

Brian Bidulock L<mailto:bidulock@openss7.org>.

=head1 SEE ALSO

L<xde-keys(1)>

=cut

# vim: set sw=4 tw=72 nocin:
