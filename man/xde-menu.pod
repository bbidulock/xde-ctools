=pod

=head1 NAME

xde-menu - XDG compliant menus for XDE

=head1 SYNOPSIS

 xde-menu [ COMMAND ] [ OPTIONS ]
 xde-menugen [ OPTIONS ]
 xde-menu-popmenu [ OPTIONS ]
 xde-menu-monitor [ OPTIONS ]
 xde-menu-replace [ OPTIONS ]
 xde-menu-refresh [ OPTIONS ]
 xde-menu-restart [ OPTIONS ]
 xde-menu-quit [ OPTIONS ]

=head1 DESCRIPTION

B<xde-menu> is a command-line program that can be used to generate an
XDG compliant menu in a number of formats to support configuration of
the root menu for light-weight window managers.
It is a menu generator, system tray menu, and pop-up menu that
can be used to both generate XDG compliant menus for a number of popular
light-weight window managers as well as providing a system tray and
pop-up menu.

B<xde-menu> is capable of generating either a complete menu for a number
of well-known window managers, or for generating a sub-menu that can be
included in the root menu of those window managers.

=head1 OPTIONS

B<xde-menu> uses L<getopt_long_only(3)>, so non-ambiguous option
abbreviations are permitted.  B<xde-menu> recognizes the following
options:

=head2 COMMAND OPTIONS

Command options affect the primary operating mode of the program.  Only
one command option can be specified.
B<xde-menu> recognizes the following command options:

B<xde-menu> is typically invoked as an XDG I<autostart> item with the
B<--monitor> command option at startup of the X11 session.  The
B<--wmname> and B<--format> options can often be unspecified.

An XDG I<autostart> F<.desktop> file is installed when the package
installs that will invoke B<xde-menu> and add a status icon to the
system tray.

=over

=item B<--generate>, B<-G>

Specifies that B<xde-menu> is to generate a window manager root-menu and
then exit.  No new instance is created: only the root-menu is generated
and then the program exits.
This option does not cause an error when an instance of B<xde-menu> is
running (or not).
This is the default when B<xde-menu> is invoked as B<xde-menugen>.

B<xde-menu> is typically used with the B<--generate> option to generate
an initial window manager root menu as part of the initialization
sequence of a particular window manager or panel.  The B<--wmname>,
B<--format>, B<--output> and B<--die-on-error> options are normally
specified in this case.

=item B<--popmenu>, B<-P>

Specifies that B<xde-menu> is to request a running instance to pop-up a
menu.  The menu to pop up, the location and invocation of the pop-up is
controlled by additional general options.  Depending on the setting of
the B<--button> option, this will either pop up the menu at the current
pointer position, or will pop up the menu at the centre of the screen.
When multiple monitors are present, the menu will pop up at the centre
of the monitor in which the pointer currently resides (which is used by
most tiling window managers as the "current" monitor).
This option does not cause an error when no current instance of
B<xde-menu> is running.
This is the default when B<xde-menu> is invoked as B<xde-menu-popmenu>.

For pop-up menu operation, an background instance of B<xde-menu> can be
asked to pop up an applications or other menu using the B<--popmenu>
command option.  The major use of this operation is to pop a menu from
another program (such as a panel), or to pop a menu as a result of a
button click or button press using window manager bindings.

=item B<--monitor>, B<-m>

Specifies that B<xde-menu> is not to exit after successfully
generating the menu, but to monitor pertinent directories for changes,
and regenerate the menu when changes are detected.  This option implies
the B<--output> option, without an argument.

When changes are detected in the application database, the menu is
regenerated after an interval of no changes.  When changes are detected
to the active window manager, the menu is regenerated, to the location
and in the format of the new window manager, after an interval of no
changes.

Runs a new instance of B<xde-menu> and specifies that the program is to
monitor pertinent directories for changes and regenerate all menus
(root, system tray and pop-up) when changes are detected.
This option implies the B<--output> option.
This option normally requires L<libinotify(3)>.
This option causes an error when another instance of B<xde-menu> is
already running.
(See the B<--replace> option, below.)
This is the default when B<xde-menu> is invoked as B<xde-menu-monitor>.

When performing background operation with the B<--monitor> command
option, the program will add a status icon to the system tray.  The
status icon will be able to be used to  pop up the menu.  Addition of a
status icon to the system tray can be avoided using the B<--notray>
option.  The status icon can also be removed using the status icon
pop-up configuration menu.

=item [B<--replace>, B<-R>]

Replace a currently running instance (that was invoked with the
B<--monitor> option).
It is not an error if no other instance is running.
Runs a new instance of B<xde-menu> and specifies that the program is to
monitor pertinent directories for changes and regenerate all menus when
changes are detected.
This option implies the B<--output> and B<--monitor> option.
This option normally requires L<libinotify(3)>.
This option (unlike B<--monitor>) does not cause an error when another
instance of B<xde-menu> is already running, and simply replaces all
other instances.
This is the default when B<xde-menu> is invoked as B<xde-menu-replace>,
or when no command option is specified.

=item B<--refresh>, B<-E>

Asks a running instance of B<xde-menu> to refresh the menu.  This is
normally not required when B<xde-menu> is run with the B<--monitor>
option, as B<xde-menu> then detects when F<.desktop> files, icons, theme
files or window managers have changed and automatically refreshes the
menus in response.
This option causes an error when no current instance of B<xde-menu> is
running.
This is the default when B<xde-menu> is invoked as B<xde-menu-refresh>.

=item B<--restart>, B<-S>

Asks a running instance of B<xde-menu> to restart (re-execute itself
with the same options and arguments).  This is useful when the
B<xde-menu> executables have been upgraded.
This option causes an error when no current instance of B<xde-menu> is
running.
This is the default when B<xde-menu> is invoked as B<xde-menu-restart>.

=item B<--quit>, B<-q>

Ask a currently running instance (that was invoked with the B<--monitor>
option) to quit.  It is not an error if no other instance is running.
This is the default when B<xde-menu> is invoked as B<xde-menu-quit>.

=item B<--help>, B<-h>

Print usage information, including the current values of option
defaults, and exit.

=item B<--version>, B<-V>

Print version information and exit.

=item B<--copying>, B<-C>

Print copying information and exit.

=back

=head2 GENERAL OPTIONS

=over

=item B<--display> I<DISPLAY>

Specify the display to use (overriding the C<DISPLAY> environment
variable).  The default is the value of the C<DISPLAY> environment
variable.

=item B<--screen>, B<-s> I<SCREEN>

Specify the screen number to use when positioning the menu.  The default
is either specified by the C<DISPLAY> environment variable (when that
variable specifies a screen); otherwise, all screens will be considered.

=item B<--die-on-error>, B<-e>

Abort execution on any error.
Useful in conjunction with the B<--generate> option.

=item B<--notray>

Run without installing the menu in the system tray.
This is the default when the program in invoked as B<xde-menu-generate>
or when the B<--generate> option is specified.

=item B<--nogenerate>

Do not generate window manager root menus.  This option is invalid when
no command option is specified, or when the program is invoked as
B<xde-menugen>.  When combined with the B<--notray> option, the program
will background itself and service B<--popmenu> requests only.

=item B<--verbose>, B<-v> [I<LEVEL>]

When generating output, generate more verbose output.  Increments or
sets the output verbosity to I<LEVEL>.  The default level is C<1>.
Normal output is printed to standard output.  This option may be
repeated.

=item B<--debug>, B<-D> [I<LEVEL>]

Print debugging information to standard error during operation.
Increments or sets the debug verbosity to I<LEVEL>.  The default level
is C<0>.  Debugging output is printed to standard error.  This option
may be repeated.

=back

=head3 MENU FORMAT OPTIONS

The following options affect the formatting and output of the window
manager root window menu, system tray menu and pop-up menu.  Not all
options affect the system tray and pop-up menus.

=over

=item B<--wmname>, B<-w> I<WMNAME>

Specifies the name of the window manager for which menus are to be
generated.  Currently recognized window managers are as follows:


L<2bwm(1)>,
L<adwm(1)>,
L<afterstep(1)>,
L<awesome(1)>,
L<blackbox(1)>,
L<ctwm(1)>,
L<cwm(1)>,
L<dtwm(1)>,
L<dwm(1)>,
L<echinus(1)>,
L<etwm(1)>,
L<fluxbox(1)>,
L<flwm(1)>,
L<fvwm(1)>,
L<icewm(1)>,
L<jwm(1)>,
L<matwm2(1)>,
L<metacity(1)>,
L<mwm(1)>,
L<openbox(1)>,
L<pekwm(1)>,
L<spectrwm(1)>,
L<twm(1)>,
L<uwm(1)>,
L<vtwm(1)>,
L<waimea(1)>,
L<wind(1)>,
L<wmaker(1)>,
L<wmx(1)> and
L<yeahwm(1)>.

When unspecified, or when a window manager change is detected, the
setting of the C<_XDE_WM_NAME> property on the root window (or the
C<WM_NAME> or C<_NET_WM_NAME> property on the window manager check
window) is examined to determine the window manager name.  This is
accomplished by converting the value of either property to all
lowercase.  See also, L</ENVIRONMENT> and L</PROPERTIES>.

When the program is running in monitor mode for the active window
manager, the window manager name need not be specified explicitly.
However, when using the program in B<--generate> mode to simply generate
a root menu, this option (or the B<--format> option) must be specified
explicitly.

=item B<--format>, B<-f> I<FORMAT>

Specify the output format.  Recognized output formats are as follows:

L<2bwm(1)>,
L<adwm(1)>,
L<afterstep(1)>,
L<awesome(1)>,
L<blackbox(1)>,
L<ctwm(1)>,
L<cwm(1)>,
L<dtwm(1)>,
L<dwm(1)>,
L<echinus(1)>,
L<etwm(1)>,
L<fluxbox(1)>,
L<flwm(1)>,
L<fvwm(1)>,
L<icewm(1)>,
L<jwm(1)>,
L<matwm2(1)>,
L<metacity(1)>,
L<mwm(1)>,
L<openbox(1)>,
C<openboxold>,
L<pekwm(1)>,
L<perlpanel(1)>,
L<spectrwm(1)>,
L<twm(1)>,
L<uwm(1)>,
L<vtwm(1)>,
L<waimea(1)>,
L<wind(1)>,
L<wmaker(1)>,
C<wmakerold>,
L<wmx(1)>,
L<yeahwm(1)>.

When unspecified, the setting or implied setting of the B<--wmname>
option is used.  If the B<--wmname> option is also unspecified, or when
a window manager change is detected, the setting of the C<_XDE_WM_NAME>
property on the root window (or the C<WM_NAME> or C<_NET_WM_NAME>
property on the window manager check window) is examined to determine
the window manager name.  This is accomplished by converting the first
word in the value of either property to all lowercase.  See also,
L</ENVIRONMENT> and L</PROPERTIES>.

When the program is running in monitor mode for the active window
manager, the format need not be specified explicitly.  However, when
using the program in B<--generate> mode to simply generate a root menu,
this option (or the B<--wmname> option) must be specified explicitly.

Note that L<openbox(1)> and L<wmaker(1)> support both an old and new
menu format.  The old formats are only selected when explicitly
specified as C<openboxold> or C<wmakerold>.

Note also that L<perlpanel(1)> format is not associated with a specific
window manager; however, the B<--wmname> option is used to determine
which entries to place in the perl panel output and the B<--desktop>
option is used to determine which application or system entries to
include.

=item B<--fullmenu>, B<-F>, B<--nofullmenu>, B<-N>

When specified, output a full menu and not only the application
sub-menu, or not.  The default is to output a full menu.  This also
affects the system tray menu and pop-up menus accordingly.

=item B<--desktop>, B<-d> I<DESKTOP>

Specify the desktop name for C<NotShowIn> and C<OnlyShowIn> comparisons.
The default is the all uppercase string corresponding to the window
manager name, (or the desktop name explicitly specified for the window
manager and format), unless the C<XDG_CURRENT_DESKTOP> environment
variable is defined.

=item B<--charset>, B<-c> I<CHARSET>

Specify the character set with which to output the window manager root
menu.  Defaults to the character set in use by the current locale.  This
does not affect system tray and pop-up menus (which are both UTF-8).

=item B<--language>, B<-l> I<LANGUAGE>

Specify the output language for the window manager root menu.  Defaults
to the language in the current locale.  This option affects all menus.

=item B<--root-menu>, B<-r> I<MENU>

Specify the location of the root menu file.  The default is calculated
using XDG environment variables (see L</ENVIRONMENT>), and defaults to
the file F<${XDG_MENU_PREFIX}applications.menu> in the
F<$XDG_CONFIG_HOME:$XDG_CONFIG_DIRS> search path.  Note, however, that
B<xde-menu> supports both C<applications> and C<system> menus using the
B<--menu> option.

=item B<--output>, B<-o> [I<FILENAME>]

Write the window manager root menu output to the file, I<FILENAME>.
This is particularly useful with option B<--die-on-error> as the output
will not be written at all if an error is encountered.  If the
I<FILENAME> is not specified, the setting of the C<_XDE_WM_MENU>
property on the root window is examined to determine the location of the
menu file.  When the property is not set or not available, the default
menu location for the current B<--wmname> or B<--format> will be used.

Note that not all light-weight window managers support a root menu.
Note also that at startup, B<xde-menu> will wait several seconds for a
window manager to appear if one is not present at initialization and
neither the B<--wmname> nor B<--format> options are specified.

=item B<--icons>, B<--noicons>, B<-n>

Include or do not include icons in the generated menu files.  This
option has no effect when it is not possible to generate icons for the
menu format.  That is, when the B<--format> is one such as
L<blackbox(1)>, or L<waimea(1)>, it is not possible to place icons in
the root menu and this option is therefore ignored.  The default is to
place icons in icon capable generated menus.

This option affects system tray menus and pop-up menus as well.  The
default for system tray and pop-up menus is to only place icons in the
generated menus when the B<--format> also supports icons (to mimic the
behaviour of the underlying window manager).  When the window manager
B<--format> does not support a root menu, (e.g. L<dwm(1)>), icons will
be added to the menu.

=item B<--theme>, B<-t> I<THEME>

Specify the icon theme name to use when generating icons.  The default
is to obtain the icon theme name from the default locations (such as the
F<$HOME/.gtkrc-2.0> file).

=item B<--style>, B<-s> I<STYLE>

Specify which format of window manager menu specification output to
generate.  I<STYLE> can be one of the following:

=over

=item I<fullmenu>

The default: output a full menu suitable for use as the root menu
specification for the window manager.

=item I<appmenu>

Output a complete menu; however, only output the applications portion of
the menu (no styles, window manager controls, logout, etc.), suitable to
reference as an "Applications" menu.

=item I<entries>

Only output the entries for the menu but not the enclosing menu itself:
this is useful for some pipe menu commands.

=back

This option does not affect the system tray nor pop-up menus.

=item B<--launch>, B<-L>, B<--nolaunch>

Specifies whether to use L<xde-launch(1)> to launch the desktop files
directly or not.  This option will only be honoured when the
L<xde-launch(1)> program is available and accessible.
Also, some window managers (e.g. L<openbox(1)>) provide their own
desktop startup launching and some don't.  So, the default setting may
depend on the active window manager.

=item B<--menu>, B<-M> I<MENUNAME>

Specifies the filename stem of the root menu filename.
This defaults to "F<applications>."
Another useful value is "F<system>."
Other possible values include "F<information>" and "F<settings>."
The special value "F<all>" specifies that menus are to be generated for all known stems.
This option only affects the automatic determination of the root menu
file.
When the root menu file is specified with the B<--root-menu> option, the
filename is determined verbatim.

=back

=head3 POP-UP MENU OPTIONS

The following options are only valid when the B<--popmenu> command
option has been specified or implied.  These options only affect the
pop-up menu.

=over

=item B<--button>, B<-b> I<BUTTON>

Specifies the button that was used to invoke the pop-up.  Defaults to
zero (0).  This should be the button that was used to pop the menu.  A
window manager that invokes this command in response to a button press
should release its passive grab on the button before invoking the pop-up
menu so that the popped up menu can grab the button.  A I<BUTTON> of
zero (0) means that the program was invoked with a key-press instead of
a button.

=item B<--timestamp>, B<-T> I<TIMESTAMP>

Provides the X11 server time-stamp of the event that caused the pop-up.

=item B<--where>, B<-W> {B<pointer>|B<center>|B<topleft>}

Specifies the position for the pop-up menu.  This can be one of the
following values (case insensitive, may be abbreviated):

=over

=item C<pointer>

Place the northwest corner of the menu under the mouse pointer.  This
will always succeed.  This is the default when B<--button> is specified
and non-zero.

=item C<center>

Place the menu in the centre of the root window on the current screen
and monitor.  This is the default when B<--button> is unspecified or
zero.

=item C<topleft>

Place the menu in the top-left corner of the current screen and monitor
work area (considering panels and docks).

=back

When unspecified, the default placement algorithm is as follows:

=over

=item 1.

If B<--button> is specified and non-zero, place the menu at the pointer
regardless of the screen and monitor currently containing the pointer.
If the pointer is positioned outside an active monitor, fall back to the
behaviour as if B<--button> was not specified.

=item 2.

If B<--button> is unspecified or zero (0), place the menu in the centre
(considering work area) of the screen and monitor which currently
contains the keyboard focus.

=back

=back

=head1 SUPPORTED WINDOW MANAGERS

The following window managers and menu environments are supported by
B<xde-menu>:

=over

=item B<--wmname=>I<2bwm> B<--format=>I<2bwm>

Like L<dwm(1)>, L<2bwm(1)> does not provide a root menu; however, it
does provide a mechanism for invoking an external root menu.
This can be used to invoke the GTK+ version of the root menu (i.e.
pop-up menu).

=item B<--wmname=>I<adwm> B<--format=>I<adwm>

Like L<dwm(1)>, L<adwm(1)> does not provide a root menu; however, it
does provide a mechanism for invoking an external root menu.
This can be used to invoke the GTK+ version of the root menu (i.e.
pop-up menu).

=item B<--wmname=>I<afterstep> B<--format=>I<afterstep>

No support has yet been included for L<afterstep(1)>.

=item B<--wmname=>I<awesome> B<--format=>I<awesome>

No support has yet been included for L<awesome(1)>.

=item B<--wmname=>I<blackbox> B<--format=>I<blackbox>

L<blackbox(1)> provides a root menu that is formatted similar to
L<fluxbox(1)> and the older L<openbox(1)> (C<openboxold>) menu style.
The primary difference is that L<blackbox(1)> does not support the
display of icons.

=item B<--wmname=>I<ctwm> B<--format=>I<ctwm>

L<ctwm(1)> provides a root menu that is formatted similar to L<twm(1)>.
This root menu format does not support the display of icons.

=item B<--wmname=>I<cwm> B<--format=>I<cwm>

L<cwm(1)> only provides a rudimentary root menu (with no ability to
generate sub-menus); however, it has the ability to specify command
actions in response to key bindings or mouse buttons and can easily be
configured to launch the GTK+ menu.

=item B<--wmname=>I<dtwm> B<--format=>I<dtwm>

L<dtwm(1)>

=item B<--wmname=>I<dwm> B<--format=>I<dwm>

L<dwm(1)> does not provide a root menu; however, it does provide a
mechanism for invoking an external root menu.  This is used to invoke
the GTK+ version of the root menu.

=item B<--wmname=>I<echinus> B<--format=>I<echinus>

Like L<dwm(1)>, L<echinus(1)> does not provide a root menu; however, it
does provide a mechanism for invoking an external root menu.  This is
used to invoke the GTK+ version of the root menu.

=item B<--wmname=>I<etwm> B<--format=>I<etwm>

L<etwm(1)> provides a root menu that is formatted similar to L<twm(1)>.
This root menu format does not support the display of icons.

=item B<--wmname=>I<fluxbox> B<--format=>I<fluxbox>

L<fluxbox(1)> provides a root menu that is formatted similar to
L<blackbox(1)>.  This root menu, however, provides additional support
for the display of icons.

=item B<--wmname=>I<flwm> B<--format=>I<flwm>

L<flwm(1)> uses a directory of executables instead of a file format in
the identical fashion to the L<wmx(1)> window manager on which it is
based.  It does not support the use of icons in menu items.  In fact,
this is an alias for I<wmx> as the two formats are completely compatible
and interoperable.

=item B<--wmname=>I<fvwm> B<--format=>I<fvwm>

L<fvwm(1)> provides a root menu using its own unique menu format.
Although at one time L<fvwm(1)> used a L<dtwm(1)>-like menu format, it
now uses its own unique L<perl(1)> interface.  L<fvwm(1)> supports the
use of icons in menu items.

=item B<--wmname=>I<icewm> B<--format=>I<icewm>

L<icewm(1)> provides a programs menu using its own unique menu format.
It support the display of icons in menu items.  L<icewm(1)> does not
provide the ability to specify the entire root menu: some items in the
root menu are fixed by window manager and do not appear in the menu
file.

=item B<--wmname=>I<jwm> B<--format=>I<jwm>

L<jwm(1)> provides a root menu using its own XML-based menu format.  It
support the display of icons in menu items.  L<jwm(1)> recently had a
rework of its configuration files.  Unless you are on the most current
versions, your mileage may vary.

=item B<--wmname=>I<matwm2> B<--format=>I<matwm2>

Like L<dwm(1)>, L<matwm2(1)> does not provide a root menu; however, it
does provide a mechanism for invoking an external root menu.  This is
used to invoke the GTK+ version of the root menu.

=item B<--wmname=>I<metacity> B<--format=>I<metacity>

L<metacity(1)> does not provide a root menu; however, it has ample
facility for launching the GTK+ menu.

=item B<--wmname=>I<mwm> B<--format=>I<mwm>

L<mwm(1)> is the old pre-openmotify window manager that was intended on
providing the capabilities of the L<dtwm(1)> OSF/Motif/CDE window
manager.  It provides a root menu following a similar configuration file
format to L<twm(1)>, L<ctwm(1)>, L<etwm(1)> and L<vtwm(1)>.  It does not
have the ability to display icons in menu items.

=item B<--wmname=>I<openbox> B<--format=>I<openbox> or B<--format=>I<openboxold>

Two formats are supported for the L<openbox(1)> window manager: the
newer openbox-3 XML format (I<openbox>) and the older
L<fluxbox(1)>-like menu format (I<openboxold>). The default for the
L<openbox(1)> window manager is the newer style; however, it still
supports both formats.  Both formats support the use of icons in menu
items.

=item B<--wmname=>I<pekwm> B<--format=>I<pekwm>

L<pekwm(1)> provides a root menu that is formatted using its own file
format.  It supports dynamic menus and provides support for displaying
icons in menu elements.

=item B<--format=>I<perlpanel>

L<perlpanel(1)> can read a L<fluxbox(1)> or L<blackbox(1)> style menu
and generate a GTK+ menu from it.  This format generates a
L<fluxbox(1)>-like menu for use by L<perlpanel(1)>.  (Note that this
format can be specified in addition to other formats, in which case,
this format will be generated as well.)  The menu file is typically
stored in F<~/.perlpanel/menu>, F<~/.config/perlpanel/menu> or
F</usr/share/perlpanel/menu>, independent of which window manager is
currently running.

=item B<--wmname=>I<spectrwm> B<--format=>I<spectrwm>

Like L<dwm(1)>, L<spectrwm(1)> does not provide a root menu; however, it
does provide a mechanism for invoking an external root menu.  This is
used to invoke the GTK+ version of the root menu.

=item B<--wmname=>I<twm> B<--format=>I<twm>

L<twm(1)> provides a root menu that uses its own format.  L<ctwm(1)>,
L<etwm(1)> and L<vtwm(1)> share this format.  The format does not
support the display of icons in the root menu.

=item B<--wmname=>I<uwm> B<--format=>I<uwm>

L<uwm(1)> provides a root menu that uses its own format.  The format
supports the use of icons in menu items.

=item B<--wmname=>I<vtwm> B<--format=>I<vtwm>

L<vtwm(1)> provides a root menu that is formatted similar to L<twm(1)>.
This root menu format does not support the display of icons.

=item B<--wmname=>I<waimea> B<--format=>I<waimea>

L<waimea(1)> provides a root menu that is formatted similar to
L<blackbox(1)>.  As with L<blackbox(1)>, this root menu does not support
the display of icons.

=item B<--wmname=>I<wind> B<--format=>I<wind>

L<wind(1)> does not have a root menu: it doesn't have any menus at all.
L<wind(1)> window manager is difficult to support: the window manager
has no mechanism for launching a menu.  However, an external key-binder
such as L<bbkeys(1)> can be used to launch the menu.  Also, it appears
that L<wind(1)> does not grab button clicks on the root window.

=item B<--wmname=>I<wmaker> B<--format=>I<wmaker> or B<--format=>I<wmakerold>

Two formats are supported for the L<wmaker(1)> window manager: the newer
window maker lisp-based menu (I<wmaker>) and the older line-based menu
(I<wmakerold>).  The default for the L<wmaker(1)> window manager is the
newer style; however, it still supports both formats.  Neither format
supports the use of icons in menu items.

=item B<--wmname=>I<wmx> B<--format=>I<wmx>

L<wmx(1)> uses a directory of executables instead of a file format in
the identical fashion to L<flwm(1)> (which was based on L<wmx(1)>).  It
does not support the use of icons in menu items.  In fact, this is an
alias for I<flwm> as the two formats are completely compatible and
interoperable.

=item B<--wmname=>I<yeahwm> B<--format=>I<yeahwm>

L<yeahwm(1)> does not have a root menu: it doesn't have any menus at
all.  Therefore, the GTK+ menu must be used.   L<yeahwm(1)> is another
window manager that is difficult to support without an external key
binder (such as L<bbkeys(1)>).  Mouse button clicks on the root window
are intercepted by the window manager.  Support is unlikely.

=back

=head1 ENVIRONMENT

The following environment variables are significant to the operation of
B<xde-menu>:

=over

=item C<$XDG_CURRENT_DESKTOP>

Specifies the current desktop.  When the B<--format> is not specified,
the format defaults to the value of this environment variable converted
to lower-case.  When the B<--desktop> is not specified, the desktop
defaults to the value of this environment variable.

=item C<$XDG_MENU_PREFIX>

Specifies the prefix to apply to the default menu name to derive the
root menu unless specified with the B<--root-menu> option.  When
unspecified, this variable defaults to a null string.

B<xde-menu> finds the root menu using the following logic:

=over

=item 1.

If a file name is specified using the B<--root-menu> option, (and the
window manager has not changed since B<xde-menu> was launched), that
file name is used as the root menu.

=item 2.

If the window manager has changed since B<xde-menu> was launched, any
B<--root-menu> option that was specified at launch is ignored.

=item 3.

If the file specified by B<--root-menu> is not found or unspecified, the
file name F<${XDG_MENU_PREFIX}applications.menu> is sought in each of
the sub-directories name F<menu> in the path
F<$XDG_CONFIG_HOME:$XDG_CONFIG_DIRS> in accordance with the XDG menu
specification.

Note that the stem F<applications> can be changed using the
B<--menu> option.

=item 4.

If not found, the file name F<applications.menu> is sought in each of
the F<menu> sub-directories in the path
F<$XDG_CONFIG_HOME:$XDG_CONFIG_DIRS> in accordance with the XDG menu
specification.

Note that the stem F<applications> can be changed using the
B<--menu> option.

=back

=item C<$XDG_CONFIG_HOME>

Specifies the user XDG configuration directory.  When unspecified, defaults
to F<$HOME/.config> in accordance with XDG specifications.

=item C<$XDG_CONFIG_DIRS>

Specifies the system XDG configuration directories.  When unspecified,
defaults to F</etc/xdg> in accordance with XDG specifications.

=item C<$XDG_DATA_HOME>

Specifies the user XDG data directory.  When unspecified, defaults to
F<$HOME/.local/share> in accordance with XDG specifications.

=item C<$XDG_DATA_DIRS>

Specifies the system XDG data directory search path.  When unspecified,
defaults to F</usr/local/share:/usr/share> in accordance with XDG
specifications.

=item C<$XDG_ICON_THEME>

Specifies the name of the icon theme.  When not specified, the icon
theme will be determined from configuration sources (e.g. the
F<$HOME/.gtkrc-2.0> file).

=back

=head1 PROPERTIES

The following X11 window properties are significant to the operation of
B<xde-menu>:

=over

=item C<_XDE_WM_NAME>

When available and set on the root window, specifies the window manager
name used to derive the B<--wmname> and B<--format> options when the
options are unspecified or when the window manager has changed since the
B<xde-menu> command was launched.

=item C<_NET_WM_NAME>

When C<_XDE_WM_NAME> is unavailable, and this property is set properly
on the window manager EWMH/NetWM check window, the first word of the
property will be used to derive the B<--wmname> and B<--format> options
when the options are unspecified or when the window manager has changed
since the B<xde-menu> command was launched.

=item C<_XDE_WM_STYLE>

When set on the root window, or XDE check window, used to determine the
location of the window manager style file.

=item C<_XDE_WM_STYLENAME>

When set on the root window, or XDE check window, used to determine the
name of the style set for the window manager.

=item C<_XDE_WM_THEME>

When set on the root window, or XDE check window, used to determine the
name of the theme set for XDE.

=item C<_XDE_WM_THEMEFILE>

When set on the root window or XDE check window, used to determine the
file to use for the theme set for XDE.

=back

=head1 USAGE

B<xde-menu> currently uses F<libwnck+> or F<libwnck> both to identify
the window manager and to provide the window manager actions menu.  The
range and format of window manager actions provided by F<libwnck+> is
superior to F<libwnck>.  This use means that B<xde-menu> does not
currently provide any support for window managers that do not have a
modicum of compliance to the EWMH/NetWM specifications.  That may change
in the future.

=head1 HISTORY

B<xde-menu> was written for a number of reasons:

=over

=item 1.

Existing L<fluxbox(1)> menu generators that read XDG .desktop files
(L<fbmenugen(1)>, L<menutray(1)>) do not conform to the XDG menu
generation specifications and in particular are incapable of merging
menus.

Many existing light-weight window manager generators that read XDG
F<.desktop> files do not conform to the XDG menu generation
specifications and, in particular, are incapable of merging menus.

=item 2.

Existing XDG menu generators (such as the SuSE L<xdg_menu(1)> script) do
not properly merge default merge directories and do not observe
C<E<lt>LayoutE<gt>> commands.  Also, they are poor at including icons in
the generated menus.  They, of course, do not generate system tray nor
pop-up menus either.

=item 3.

Existing XDG menu generators run once and keep cache information, or
have a C<regenerate> command placed in the menu.  They do not monitor
XDG directories for changes and update menus on changes.

=item 4.

The L<lxpanel(1)> and L<pcmanfm(1)> menu generators do not have any of
the above deficiencies; however, they do not create window manager
specific sub-menus.

=back

This program largely incorporates the perl versions of the
L<xdg-traymenu(1p)> and L<xdg-menugen(1p)> programs.  The reason for
incorporating both together was to reduce the amount of time that is
taken to read and cache F<.desktop> file information.

=head1 AUTHOR

Brian Bidulock L<mailto:bidulock@openss7.org>.

=head1 SEE ALSO

L<xde-style(1)>,
L<xde-menugen(1)>,
L<xdg-traymenu(1p)>,
L<xdg-menugen(1p)>,
L<xde-identify(1)>,
L<inotify(7)>.

=cut

# vim: set ft=pod sw=4 tw=72 nocin spell spelllang=en_ca:
