=pod

=head1 NAME

xde-dock - Window Maker style dock for XDE

=head1 SYNOPSIS

B<xde-dock> [I<OPTIONS>]

=head1 DESCRIPTION

Provides a dock for window managers that do not support one and provides
a more consistent and rich experience for those that do.  For window
manager that provide a dock, provide the ability to start dock
applications in the order they were specified.  Also, performs X11R6
session management for dock applications.

=head2 FEATURES

B<xde-dock> has the following features:

=over

=item 1.

Provides a window-maker-style dock for dock applications.

=item 2.

Provides the ability to theme the dock following the XDE theme.

=item 3.

Provides an XDG compliant menu for adding new dock applications to the
dock.

=item 4.

Permits the removal and reordering of dock applications in the dock.

=item 5.

Provides the ability to auto-start dock applications when B<xde-dock>
starts.

=item 6.

Handles changes in window manager automatically.

=back

=head1 OPTIONS

Because GNU L<getopt_long_only(3)> is used, non-ambiguous abbreviations
and single dash long options are accepted; however, single flag short
options should not be concatenated.

B<xde-dock> recognizes the following options:

=head2 COMMAND OPTIONS

Command options affect the major operating mode of the program.  Only
one of the following command options should be specified.  When no
command options is specified, B<xde-dock> will assume that normal
operation is requested.

B<xde-dock> provides the following command options:

=over

=item B<--quit>, B<-q>

Ask a running instance of B<xde-dock> to quit.

=item B<--help>, B<-h>

Print usage information to standard error containing current defaults
and exit.

=back

=head2 GENERAL OPTIONS

General options do not affect the major operating mode of the program.
B<xde-dock> provides the following general options:

=over

=item B<--verbose>, B<-v> [I<LEVEL>]

Print extra information on standard error while running.  When I<LEVEL>
is not specified, simply increments the output verbosity; otherwise, the
output verbosity is set to I<LEVEL>.

=item B<--debug>, B<-D> [I<LEVEL>]

Print debugging information on standard error while running.  When
I<LEVEL> is not specified, simply increments the debug level; otherwise,
the debug level is set to I<LEVEL>.

=back

=head2 SESSSION MANAGEMENT OPTIONS

X session management options are not used by another user other than the
X11 Session Manager.  The following options are used by X session
management:

=over

=item B<-clientId> I<CLIENTID>

Specifies the X Session Management client identifier of the previously
running session of B<xde-dock>.

=item B<-restore> I<SAVEFILE>

Specifies the X Session Management filename of a file to which to save
session information.

=back

=head1 BEHAVIOUR

=head2 IDENTIFYING DOCK APPLICATIONS

=head1 FILES

=head2 CONFIGURATION FILE

B<xde-dock> uses a configuration file to store information about the
dock applications that were or are to be started and the window manager
in effect when the dock applications where running.  This file format is
used both for basic configuration for startup of a default session, as
well as for storing specific X11R6 session information for B<xde-dock>.
This file is a basic XML formatted file.

=head2 DOCK APPLICATION FILES

B<xde-dock> dock application files are XDG F<.desktop> files that exist
in a number of directories.  B<xde-dock> searches these directories for
dock applications when presenting a menu to the user.  To identify
window maker dock applications, B<xde-dock> looks for a F<.desktop> file
that has C<DockApp> and C<WMAKER> in the C<Categories> field of the
F<.desktop> file.

=over

=item F<$XDG_DATA_HOME:$XDG_DATA_DIRS/applications>

This is the XDG standard location for applications F<.desktop> entries.
Files in these directories that have C<DockApp> and C<WMAKER> in the
C<Categories> field will be considered dock applications.

=item F<$XDG_CONFIG_HOME:$XDG_CONFIG_DIRS/autostart>

This is the XDG standard location for auto-started F<.desktop> entries.
Files in these directories that have C<DockApp> and C<WMAKER> in the
C<Categories> field will be considered dock applications.

=item F<$XDG_DATA_HOME:$XDG_DATA_DIRS/dockapps>

This is an additional location (following XDG precedence rules) for dock
application entries.  Files in these directories are automatically
considered to be dock applications.

=back

Note that, because some dock applications are only usable with certain
window managers, the C<OnlyShowIn> and C<NotShowIn> fields of the
corresponding F<.desktop> are also considered which presenting a list of
dock applications to invoke.

=head1 ENVIRONMENT

The following environment variables are examined or set by B<xde-dock>:

=over

=item B<HOME>

Will be used to determine the user's home directory for the purpose of
calculating the default value for C<XDG_CONFIG_HOME> and
C<XDG_DATA_HOME>.

=item B<XDG_CONFIG_HOME>

When set, F<$XDG_CONFIG_HOME/autostart> will be examined for F<.desktop>
files.  The variable defaults to F<$HOME/.config>.

=item B<XDG_CONFIG_DIRS>

When set, F<DIRECTORY/autostart> will be examined for each I<DIRECTORY>
in the colon separated list of directories contained in
C<$XDG_CONFIG_DIRS>.  The variable defaults to F</etc/xdg>.

=item B<XDG_DATA_HOME>

When set, F<$XDG_DATA_HOME/{applications,dockapps}> will be examined for
F<.desktop> files.  The variable defaults to F<$HOME/.local/share>.

=item B<XDG_DATA_DIRS>

When set, F<DIRECTORY/{applications,dockapps}> will be examined for
F<.desktop> files.  The variable defaults to
F</usr/local/share:/usr/share>.

=item B<XDG_CURRENT_DESKTOP>

Will be used to determine the active desktop environment for determining
which dock applications to present for the desktop environment.

=item B<SESSION_MANAGER>

When set, used to connect to the X11R6 session manager and perform
session management operations.

=back

=head1 SIGNALS

=head1 CONFIGURATION

=head1 WINDOW MANAGERS

B<xde-dock> supports the full range of window managers supported by the
L<XDE(3)> suite.  It should work well on stacking, non-virtual root,
re-parenting, EWMH/NetWM compliant window managers; however, not that
many window managers have issues in this regard.  Supported window
managers include:

=over

=item L<2bwm(1)>

L<2bwm(1)> does not provide a dock for window maker dock applications.
However, L<2bwm(1)> does provide a good degree of EWMN/NetWM support and
is capable of supporting B<xde-dock> running as a stand-alone dock.

=item L<adwm(1)>

L<adwm(1)> provides a dock for dock applications that it calls the
I<dock>.  It provides for configured arrangement of dock applications
and docking of applications is automatic.  L<adwm(1)> cannot be started
without a I<dock> by configuration nor by command line option.

=item L<afterstep(1)>

L<afterstep(1)> provides  dock for dock applications that it calls the
I<wharf>.  It provides for configured arrangement of dock applications;
however, docking is not automatic and specific dock applications must be
"swallowed" into the I<wharf>.

L<afterstep(1)> can be started without a I<wharf> by configuration, but
not by command line option.

B<xde-dock> provides an enhanced docking experience for L<afterstep(1)>,
by identifying dock applications, unmapping them, and then re-parenting
them away from L<afterstep(1)>.

=item L<awesome(1)>

L<awesome(1)> does not provide a dock.  L<awesome(1)> has good
EWMH/NetWM support.

=item L<blackbox(1)>

L<blackbox(1)> provides a dock for dock applications that it calls the
I<slit>.  No arrangement of dock applications is provided (they appear
in the order in which their windows were mapped), and no mechanism for
launching dock applications is provided.

L<blackbox(1)> cannot be started nor configured to not provide the
I<slit>.

B<xde-dock> provides an enhanced docking experience for L<blackbox(1)>,
by identifying dock applications, unmapping them, and then re-parenting
them away from the L<blackbox(1)> I<slit>.  B<xde-dock> still respects
changes made to the L<blackbox(1)> I<slit> configuration so that panel
menu controls still function.

=item L<ctwm(1)>

L<ctwm(1)> does not provide a dock.  L<ctwm(1)> also does not have much
EWMH/NetWM support.

=item L<cwm(1)>

L<cwm(1)> does not provide a dock.  L<cwm(1)> also does not have much
EWMH/NetWM support.

=item L<dtwm(1)>

=item L<dwm(1)>

L<dwm(1)> does not provide a dock.  L<dwm(1)> also does not have much
EWMH/NetWM support.

=item L<echinus(1)>

L<echinus(1)> does not provide a dock.  L<echinus(1)> has some
EWMH/NetWM support.

=item L<etwm(1)>

L<etwm(1)> does not provide a dock.  L<etwm(1)> does have superior
EWMH/NetWM support.  B<xde-dock> provides a window maker dock
application dock for L<etwm(1)>.

=item L<fluxbox(1)>

L<fluxbox(1)> provides a dock for dock applications that it calls the
I<slit>.  Only a rudimentary arrangement of dock applications is
provided by the window manager and no mechanism for launching dock
applications is provided.

L<fluxbox(1)> cannot be started nor configured to not provide the
I<slit>.

B<xde-dock> provides an enhanced docking experience for L<fluxbox(1)>,
by identifying dock applications, unmapping them, and then re-parenting
them away from the L<fluxbox(1)> I<slit>.  B<xde-dock> still respects
changes made to the L<fluxbox(1)> I<slit> configuration so that panel
menu controls still function.

=item L<flwm(1)>

L<flwm(1)> does not provide a dock.  L<flwm(1)> does not provide
EWMH/NetWM support and only supports some parts of WMH/WinWM
specification.

=item L<fvwm(1)>

L<fvwm(1)> provides a dock for dock applications that it calls the
I<wharf>.  It provides for configured arrangement of dock applications;
however, docking is not automatic and specific dock applications must be
"swallowed" into the I<wharf>.

L<fvwm(1)> can be started without a I<wharf> by configuration, but not
by command line option.

B<xde-dock> provides an enhanced docking experience for L<fvwm(1)>, by
identifying dock applications, unmapping them, and then re-parenting
them away from L<fvwm(1)>.

=item L<icewm(1)>

L<icewm(1)> does not provide a dock for dock applications.  When
launched, dock applications will often appear in their own window
because L<icewm(1)> does not understand mapping windows in the
C<WithdrawnState>: it interprets the C<WithdrawnState> as a don't-care
state.

B<xde-dock> provides a consistent docking experience for L<icewm(1)>, by
identifying dock applications, unmapping them, and then re-parenting
them away from the L<icewm(1)>.

=item L<jwm(1)>

L<jwm(1)> does not provide a dock for dock applications.  When launched,
dock applications will often appear in their own window because
L<jwm(1)> does not understand mapping windows in the C<WithdrawnState>
and does not display dock applications at all.

B<xde-dock> provides a consistent docking experience for L<jwm(1)>, by
identifying dock applications, unmapping them, and then re-parenting
them away from the L<jwm(1)>.

=item L<matwm2(1)>

L<matwm2(1)> does not provide a dock for dock applications.
L<matwm2(1)> provides good degree of EMWH/NetWM support and is capable
of supporting B<xde-dock> running as a stand-alone dock.

=item L<metacity(1)>

L<metacity(1)> does not provide a dock for dock applications.  It does,
however, understand mapping in the C<WithdrawnState> and does not
display dock applications at all.

B<xde-dock> provides a consistent docking experience for L<metacity(1)>,
by identifying dock applications, unmapping them, and then re-parenting
them away from L<metacity(1)>.

=item L<mwm(1)>

=item L<openbox(1)>

L<openbox(1)> provides a dock for dock applications that it calls the
I<dock>.  No arrangement of dock applications is provided (they appear
in the order in which their windows were mapped), and no mechanism for
launching dock applications is provided.

L<openbox(1)> cannot be started without the I<dock>, but can be
configured to not implement the I<dock> for a particular configuration.

B<xde-dock> provides an enhanced docking experience for L<openbox(1)>,
by identifying dock applications, unmapping them, and then re-parenting
them away from the L<openbox(1)> I<dock>.  B<xde-dock> still respects
changes made to the L<openbox(1)> I<dock> configuration so that
L<obconf(1)> controls will still function.

=item L<pekwm(1)>

L<pekwm(1)> provides a dock for dock applications that it calls the
I<harbour>.  No arrangement of dock applications is provided (they
appear in the order in which their windows were mapped), and no
mechanism for launching dock applications is provided.  L<pekwm(1)> does
not handle centering of dock applications in tiles the way that others
(L<fluxbox(1)>, L<blackbox(1)>, L<openbox(1)>) do, and will mess up when
a 56x56 dock app expects to be centered in a 64x64 tile.

L<pekwm(1)> cannot be started nor configured to not provide the
I<harbour>.

B<xde-dock> provides an enhanced docking experience for L<pekwm(1)>, by
identifying dock applications, unmapping them, and then re-parenting
them away from the L<pekwm(1)> I<harbour>.  B<xde-dock> still respects
changes made to the L<pekwm(1)> I<harbour> configuration so that root
menu controls still function.

=item L<spectrwm(1)>

L<spectrwm(1)> does not provide a dock for window maker dock
applications.  However, L<spectrwm(1)> does provide a good degree of
EWMH/NetWM support and is capable of supporting B<xde-dock> running as a
stand-alone dock.

=item L<twm(1)>

L<twm(1)> does not provide a dock for window maker dock applications.
It also does not provide EWMH/NetWM or WMH/WinWM support and is likely
incapable of supporting B<xde-dock> as a stand-alone dock.  Use
L<etwm(1)> instead.

=item L<vtwm(1)>

L<vtwm(1)> does not provide a dock for window maker dock applications.
It also does not provide EWMH/NetWM or WMH/WinWM support and is likely
incapable of supporting B<xde-dock> as a stand-alone dock.  Use
L<etwm(1)> instead.

=item L<waimea(1)>

L<waimea(1)> has a dock of its own for window maker dock applications
called a I<dockappholder>.  It provides for multiple instances,
positioning and ordering of dock applications using regular expressions
in its configuration file.  No mechanism for launching applications is
provided.

L<waimea(1)> cannot be started nor configured to not provide the (at
least one) I<dockappholder>.

B<xde-dock> provides an enhanced docking experience for L<waimea(1)>, by
identifying dock applications, unmapping them, and then re-parenting
them away from the L<waimea(1)> I<dockappholder>.  B<xde-dock> still
respects changes made to the L<waimea(1)> I<dockappholder> configuration
so that panel menu controls still function.

=item L<wind(1)>

L<wind(1)> does not support a dock for window maker dock applications.
L<wind(1)> does provide a good degree of EWMH/NetWM support and is
capable of supporting B<xde-dock> running as a stand-alone dock.

=item L<wmaker(1)>

L<wmaker(1)> provides a dock for dock applications that it calls the
I<dock>.  It provides for graphical rearrangement of dock applications
in the dock, has a built-in mechanism for launching dock applications at
startup and even now has drawers.

L<wmaker(1)> can be started without its I<dock> (command line option).

=item L<wmx(1)>

L<wmx(1)> does not support a dock for window maker dock applications.
L<wmx(1)> does provide a good degree of EWMH/NetWM support and is
capable of supporting B<xde-dock> running as a stand-alone dock.

=item L<yeahwm(1)>

L<yeahwm(1)> does not support a dock for window maker dock applications.
L<yeahwm(1)> also does not support EWMH/NetWM or WMH/WinWM and is
unlikely to be able to fully support B<xde-dock> running as a
stand-alone dock.

=back

=head1 HISTORY

I wrote B<xde-dock> because there were three supported window managers
in the I<XDE> suite that did not support a window maker application
dock.  Once written, it was apparent that a more rich experience could
be provided to users of those window managers that do support a dock.
B<xde-dock> was originally written in L<perl(1)>, but was since ported
to a C<C> language program primarily due to the lack of X session
management library support for L<perl(1)>.

Originally XDE used to start window maker dock applications using XDG
auto-start.  Dock applications were placed in F<.desktop> files in
F</etc/xdg/autostart>.  While this technique can still be used, it is
preferred to now use B<xde-dock> to launch the initial window maker
dock applications.

=head1 AUTHOR

Brian Bidulock <bidulock@cpan.org>

=head1 SEE ALSO

L<getopt_long_only(3)>,
L<xde-ctools(1)>

=cut

# vim: set sw=4 tw=72 nocin spell spelllang=en_ca:
