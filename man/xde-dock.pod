=pod

=head1 NAME

xde-dock - Window Maker style dock for XDE

=head1 SYNOPSIS

B<xde-dock> [I<OPTIONS>]

=head1 DESCRIPTION

Provides a dock for window managers that do not support one and provides
a more consistent and rich experience for those that do.  For window
manager that provide a dock, provide the ability to start dock
applications in the order they were specified.  Also, performs X11R6
session management for dock applications.

=head2 FEATURES

B<xde-dock> has the following features:

=over

=item 1.

Provides a window-maker-style dock for dock applications.

=item 2.

Provides the ability to theme the dock following the XDE theme.

=item 3.

Provides an XDG compliant menu for adding new dock applications to the
dock.

=item 4.

Permits the removal and reordering of dock applications in the dock.

=item 5.

Provides the ability to auto-start dock applications when B<xde-dock>
starts.

=item 6.

Handles changes in window manager automatically.

=back

=head1 OPTIONS

Because GNU L<getopt_long_only(3)> is used, non-ambiguous abbreviations
and single dash long options are accepted; however, single flag short
options should not be concatenated.

B<xde-dock> recognizes the following options:

=head2 COMMAND OPTIONS

Command options affect the major operating mode of the program.  Only
one of the following command options should be specified.  When no
command options is specified, B<xde-dock> will assume that normal
operation is requested.

B<xde-dock> provides the following command options:

=over

=item B<--quit>, B<-q>

Ask a running instance of B<xde-dock> to quit.

=item B<--help>, B<-h>

Print usage information to standard error containing current defaults
and exit.

=back

=head2 GENERAL OPTIONS

General options do not affect the major operating mode of the program.
B<xde-dock> provides the following general options:

=over

=item B<--verbose>, B<-v> [I<LEVEL>]

Print extra information on standard error while running.  When I<LEVEL>
is not specified, simply increments the output verbosity; otherwise, the
output verbosity is set to I<LEVEL>.

=item B<--debug>, B<-D> [I<LEVEL>]

Print debugging information on standard error while running.  When
I<LEVEL> is not specified, simply increments the debug level; otherwise,
the debug level is set to I<LEVEL>.

=back

=head2 SESSSION MANAGEMENT OPTIONS

X session management options are not used by another user other than the
X11 Session Manager.  The following options are used by X session
management:

=over

=item B<-clientId> I<CLIENTID>

Specifies the X Session Management client identifier of the previously
running session of B<xde-dock>.

=item B<-restore> I<SAVEFILE>

Specifies the X Session Management filename of a file to which to save
session information.

=back

=head1 FILES

=head1 ENVIRONMENT

=head1 SIGNALS

=head1 CONFIGURATION

=head1 BEHAVIOUR

=head1 WINDOW MANAGERS

B<xde-dock> supports the full range of window managers supported by the
L<XDE(3)> suite.  It should work well on stacking, non-virtual root,
re-parenting, EWMH/NetWM compliant window managers; however, not that
many window managers have issues in this regard.  Supported window
managers include:

=over

=item L<2bwm(1)>

=item L<adwm(1)>

=item L<afterstep(1)>

L<afterstep(1)> provides  dock for dock applications that it calls the
I<wharf>.  It provides for configured arrangement of dock applications;
however, docking is not automatic and specific dock applications must be
"swallowed" into the I<wharf>.

L<afterstep(1)> can be started without a I<wharf> by configuration, but
not by command line option.

B<xde-dock> provides an enhanced docking experience for L<afterstep(1)>,
by identifying dock applications, unmapping them, and then re-parenting
them away from L<afterstep(1)>.

=item L<awesome(1)>

=item L<blackbox(1)>

L<blackbox(1)> provides a dock for dock applications that it calls the
I<slit>.  No arrangement of dock applications is provided (they appear
in the order in which their windows were mapped), and no mechanism for
launching dock applications is provided.

L<blackbox(1)> cannot be started nor configured to not provide the
I<slit>.

B<xde-dock> provides an enhanced docking experience for L<blackbox(1)>,
by identifying dock applications, unmapping them, and then re-parenting
them away from the L<blackbox(1)> I<slit>.  B<xde-dock> still respects
changes made to the L<blackbox(1)> I<slit> configuration so that panel
menu controls still function.

=item L<ctwm(1)>

=item L<cwm(1)>

=item L<dtwm(1)>

=item L<dwm(1)>

=item L<echinus(1)>

=item L<etwm(1)>

=item L<fluxbox(1)>

L<fluxbox(1)> provides a dock for dock applications that it calls the
I<slit>.  Only a rudimentary arrangement of dock applications is
provided by the window manager and no mechanism for launching dock
applications is provided.

L<fluxbox(1)> cannot be started nor configured to not provide the
I<slit>.

B<xde-dock> provides an enhanced docking experience for L<fluxbox(1)>,
by identifying dock applications, unmapping them, and then re-parenting
them away from the L<fluxbox(1)> I<slit>.  B<xde-dock> still respects
changes made to the L<fluxbox(1)> I<slit> configuration so that panel
menu controls still function.

=item L<flwm(1)>

=item L<fvwm(1)>

L<fvwm(1)> provides a dock for dock applications that it calls the
I<wharf>.  It provides for configured arrangement of dock applications;
however, docking is not automatic and specific dock applications must be
"swallowed" into the I<wharf>.

L<fvwm(1)> can be started without a I<wharf> by configuration, but not
by command line option.

B<xde-dock> provides an enhanced docking experience for L<fvwm(1)>, by
identifying dock applications, unmapping them, and then re-parenting
them away from L<fvwm(1)>.

=item L<icewm(1)>

L<icewm(1)> does not provide a dock for dock applications.  When
launched, dock applications will often appear in their own window
because L<icewm(1)> does not understand mapping windows in the
C<WithdrawnState>: it interprets the C<WithdrawnState> as a don't-care
state.

B<xde-dock> provides a consistent docking experience for L<icewm(1)>, by
identifying dock applications, unmapping them, and then re-parenting
them away from the L<icewm(1)>.

=item L<jwm(1)>

L<jwm(1)> does not provide a dock for dock applications.  When launched,
dock applications will often appear in their own window because
L<jwm(1)> does not understand mapping windows in the C<WithdrawnState>
and does not display dock applications at all.

B<xde-dock> provides a consistent docking experience for L<jwm(1)>, by
identifying dock applications, unmapping them, and then re-parenting
them away from the L<jwm(1)>.

=item L<matwm2(1)>

=item L<metacity(1)>

L<metacity(1)> does not provide a dock for dock applications.  It does,
however, understand mapping in the C<WithdrawnState> and does not
display dock applications at all.

B<xde-dock> provides a consistent docking experience for L<metacity(1)>,
by identifying dock applications, unmapping them, and then re-parenting
them away from L<metacity(1)>.

=item L<mwm(1)>

=item L<openbox(1)>

L<openbox(1)> provides a dock for dock applications that it calls the
I<dock>.  No arrangement of dock applications is provided (they appear
in the order in which their windows were mapped), and no mechanism for
launching dock applications is provided.

L<openbox(1)> cannot be started without the I<dock>, but can be
configured to not implement the I<dock> for a particular configuration.

B<xde-dock> provides an enhanced docking experience for L<openbox(1)>,
by identifying dock applications, unmapping them, and then re-parenting
them away from the L<openbox(1)> I<dock>.  B<xde-dock> still respects
changes made to the L<openbox(1)> I<dock> configuration so that
L<obconf(1)> controls will still function.

=item L<pekwm(1)>

L<pekwm(1)> provides a dock for dock applications that it calls the
I<harbour>.  No arrangement of dock applications is provided (they
appear in the order in which their windows were mapped), and no
mechanism for launching dock applications is provided.  L<pekwm(1)> does
not handle centering of dock applications in tiles the way that others
(L<fluxbox(1)>, L<blackbox(1)>, L<openbox(1)>) do, and will mess up when
a 56x56 dock app expects to be centered in a 64x64 tile.

L<pekwm(1)> cannot be started nor configured to not provide the
I<harbour>.

B<xde-dock> provides an enhanced docking experience for L<pekwm(1)>, by
identifying dock applications, unmapping them, and then re-parenting
them away from the L<pekwm(1)> I<harbour>.  B<xde-dock> still respects
changes made to the L<pekwm(1)> I<harbour> configuration so that root
menu controls still function.

=item L<perlpanel(1)>

=item L<spectrwm(1)>

=item L<twm(1)>

=item L<vtwm(1)>

=item L<waimea(1)>

=item L<wind(1)>

=item L<wmaker(1)>

L<wmaker(1)> provides a dock for dock applications that it calls the
I<dock>.  It provides for graphical rearrangement of dock applications
in the dock, has a built-in mechanism for launching dock applications at
startup and even now has drawers.

L<wmaker(1)> can be started without its I<dock> (command line option).

=item L<wmx(1)>

=item L<yeahwm(1)>

=back

=head1 HISTORY

I wrote B<xde-dock> because there were three supported window managers
in the I<XDE> suite that did not support a window maker application
dock.  Once written, it was apparent that a more rich experience could
be provided to users of those window managers that do support a dock.
B<xde-dock> was originally written in L<perl(1)>, but was since ported
to a C<C> language program primarily due to the lack of X session
management library support for L<perl(1)>.

=head1 AUTHOR

Brian Bidulock <bidulock@cpan.org>

=head1 SEE ALSO

L<getopt_long_only(3)>,
L<xde-ctools(1)>

=cut

# vim: set sw=4 tw=72 nocin spell spelllang=en_ca:
