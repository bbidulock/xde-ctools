=pod

=head1 NAME

xde-wkspmenu - pop-up workspace menu for XDE

=head1 SYNOPSIS

B<xde-wkspmenu> [I<OPTIONS>]

=head1 DESCRIPTION

Provides a workspace menu for window managers that do not provide one
themselves or as a better workspace menu for those that provide an
inferior one.  The workspace menu is a menu of workspaces (now called
desktops) and windows.  This is not a feedback mechanism (such as
B<xde-pager(1)> or B<xde-winlist(1)>) but is a pop-up menu that can be
used to control windows similar to a task bar.

=head1 OPTIONS

B<xde-wkspmenu> accepts the following options:

=head2 COMMAND OPTIONS

When specified, the following options alter the primary operating mode
of the program:

=over

=item [B<--popup>, B<-p>]

Post a pop-up menu.  Depending on the setting of the B<--button> option,
this will either post the pop-up menu at the current pointer position,
or centred on the workspace (screen and monitor) to which it corresponds.

=item B<--help>, B<-h>

Prints usage information and the current options settings and defaults
to standard output, then exits.

=item B<--version>, B<-V>

Prints the version of the program and a brief copyright statement to
standard output, then exits.  Parse the first line with L<awk(1)> to
obtain just the version number.

=item B<--copying>, B<-C>

Prints the long copying permissions statement to standard output, then
exits.

=back

=head2 GENERAL OPTIONS

The following options are general options:

=over

=item B<--display>, B<-d> I<DISPLAY>

Specify the display to use (overriding the B<DISPLAY> environment
variable).  The default is the value of the B<DISPLAY> environment
variable.

=item B<--screen>, B<-s> I<SCREEN>

Specify the screen number, I<SCREEN>, to use when positioning the menu.
The default is either specified by the C<DISPLAY> environment variable
(when that variable specifies a screen); otherwise, all screens will be
considered, and the screen containing the selected monitor will be used.

=item B<--monitor>, B<-M> I<MONITOR>

Specify the monitor number, I<MONITOR>, to use when positioning the
menu.  The default depends on other options.

=item B<--filename>, B<-f> I<FILENAME>

Specify the file name, I<FILENAME>, of an alternate configuration file
from which to read option settings.  The default is
F<$XDG_CONFIG_HOME/xde-wkspmenu/rc>. When the configuration file
specified does not exist, B<xde-wkspmenu> reads the file
F</usr/share/X11/app-defaults/XDE-WkspMenu>.

=item B<--pointer>, B<-p>

An alternate way of specifying B<--button=1>.

=item B<--keyboard>, B<-K>

An alternate way of specifying B<--button=0>.

=item B<--button>, B<-b> I<BUTTON>

Specifies the button that was used to invoke the pop up.  Defaults to
zero (0).  This should be the button that was used to pop the menu.  A
window manager that invokes this command in response to a button press
should release its passive grab on the button before invoking the window
menu so that the popped up menu can grab the button.  A I<BUTTON> of
zero (0) means that the program was invoked with a key-press instead of
a button.

=item B<--which>, B<-w> {B<default>|B<active>|B<focused>|B<pointer>|I<MONITOR>}

Specifies the monitor on which to pop the menu.  The default is to
determine the monitor based on other options (such as the B<--button>
option).  The option argument can be one of the following (case
insensitive, may be abbreviated):

=over

=item C<default>

When unspecified or specified as C<default>, the default monitor
selection algorithm is used as follows:

=over 4

=item 1.

When the B<--button> or B<--pointer> option is specified and non-zero,
select the monitor containing the pointer.

=item 2.

When neither B<--button> nor B<--pointer> option is specified, or
B<--button> is specified as zero, or B<--keypress> or B<--keyboard> is
specified, select the monitor with the keyboard focus.

=item 3.

When there is no monitor with the keyboard focus, select the monitor
with the active window.

=item 4.

When there is no active window and no window with the keyboard focus,
select the monitor containing (or nearest to) the pointer.

=back

=item C<active>

Use the monitor containing the active client.

=item C<focused>

Use the monitor containing the window with the keyboard focus (focused
client).

=item C<pointer>

Use the monitor containing (or closest to) the pointer.

=item I<MONITOR>

Use the specified monitor number, I<MONITOR>, indexed from zero (0),
specifying the screen and monitor on which to pop the menu.  When
there is one screen and multiple monitors (typical case for Xinerama or
RANDR multi-head setups), I<MONITOR> specifies the monitor, indexed from
zero (0).  When there are multiple screens, the B<--screen> option
specifies the screen and I<MONITOR> specifies the monitor.

=back

=item B<--where>, B<-W> {B<default>|B<pointer>|B<center>|B<topleft>|B<bottomright>|I<WHERE>}

Specifies the position for the pop-up menu.  This can be one of the
following values (case insensitive, may be abbreviated):

=over

=item C<default>

Place the menu automatically based on other information, such as the
button or key pressed to invoke the menu.  This is the default when
unspecified.  The default placement algorithm is as follows:

=over

=item 1.

If B<--button> is specified and non-zero, or B<--pointer> is specified,
place the menu at the pointer regardless of the screen and monitor
currently containing the pointer.  If the pointer is positioned outside
an active monitor, fall back to the behaviour as if B<--button> or
B<--pointer> was not specified.

=item 2.

If B<--button> is unspecified or zero (0), or B<--keyboard> is
specified, place the menu in the centre (considering work area) of the
screen and monitor which currently contains the keyboard focus or active
window.

=item 3.

Place the menu in the top left corner of the current work area.

=back

=item C<pointer>

Place the northwest corner of the menu under the mouse pointer.  This
will always succeed.  This is the default when B<--button> is specified
and non-zero.

=item C<center>

Place the menu in the centre of the current monitor belonging to the
current screen.  The current monitor and screen is the monitor which
contains (or is closest to the location of) the pointer.

=item C<topleft>

Place the menu in the top-left corner of the work area (excluding panels
and docks) for the current screen.  The current screen is the screen
specified by the B<--display> or B<--screen> options, or the screen that
currently contains the pointer.

=item I<WHERE>

Place the menu at the location specified by I<WHERE>, which should be a
string containing a screen geometry that can be parsed by
L<XParseGeometry(3)>.  This is useful when the menu is launched from a
menu button in an external program and the menu should be positioned
adjacent to the button.  The geometry should be the geometry of the
widget against which the menu should be placed.  When the width and
height of the geometry are zero (or unspecified), it describes the point
at which the menu should be placed.

=back

=item B<--order>, B<-O> I<ORDERTYPE>

Specify the order of the selection list or cycle list.  The I<ORDERTYPE>
specifies which windows to list or cycle through and the order in which
to list or cycle them.  The windows in the list can also be adjusted
using the B<--normal>, B<--all-monitors>, B<--all-workspaces>,
B<--hidden> and B<--minimized> options.  The I<ORDERTYPE> can be one of
the following:

=over

=item C<client>

Clients are listed in client order.  This is the same order that is
presented in the C<_NET_CLIENT_LIST> property on the root window of EWMH
compliant window managers.

=item C<stacking>

Clients are listed in stacking order.  This is the same order that is
presented in the C<_NET_CLIENT_LIST_STACKING> property on the root
window of EWMH compliant window managers (or when not supported,
determine stacking order directly and use the client list in the
determined stacking order).

=back

When unspecified, the default is client order (or whichever order is
supported when the window manager does not support both).

=item B<--timestamp>, B<-T> I<TIMESTAMP>

Provides the X11 server time-stamp of the event that caused the pop up.
This is the X11 server time stamp of the button or key press that
invoked the pop-up.  When the program is launched with startup
notification, the time stamp will be take from the B<DESKTOP_STARTUP_ID>
environment variable.

=item B<--key>, B<-k> [I<KEY>:I<KEY>]

Specify the key combination used to pop up the cycle list.  Modifier
keys have to be specified, only the forward and reverse cycle keys need
be specified.  Pressing the forward key will cycle forward through the
selection; the reverse key, backward.  Only useful when B<--cycle> is
also specified.  The default is C<Alt+Tab:Shift+Alt+Tab>.

=item B<--cycle>, B<-c>.

Provide a cycle list pop up instead of a list.  Cycle list pop up lists
will not be dismissed until a modifier key is released.

=item B<--normal>, B<-n>

When listing or cycling windows, also list or cycle through normal
windows.  The default is to include normal windows unless one of the
other window-specifying options is used, in which case, the default is
to not include normal windows.

=item B<--hidden>, B<-H>

When listing or cycling windows, also list or cycle through hidden
windows.  The default is to skip hidden windows or windows that have the
skip-window-list attribute.

=item B<--minimized>, B<-m>

When listing or cycling windows, also list or cycle through minimized
windows.  The default is to skip minimized windows or windows that have
the skip-window-list attribute.

=item B<--all-monitors>, B<-a>

When listing or cycling windows, also list or cycle through windows
displayed on monitors other than the current one.  This includes windows
on workspaces that are currently visible on a monitor.

=item B<--all-workspaces>, B<-A>

When cycling windows, also cycle through windows displayed on workspaces
other than the current one.  As windows are cycled, the current
workspace may change as windows from other workspaces are cycled.

=item B<--noactivate>, B<-N>

When selecting or cycling windows, do not activate them.  The default is
to activate the selected or cycled window.   When neither B<--raise> nor
B<--focus> are specified, this results in only highlighting the menu
selection.  Activation of the window will still occur; however, when the
window is selected (a modifier key is released).

=item B<--raise>, B<-U>

When selecting or cycling windows, raise the window.  The default is to
only activate the selected or cycled window and not to explicitly raise
it.  Some window managers raise windows when activated (others do not).
This provides a modicum of control.

=item B<--restore>, B<-R>

When cycling windows, restore the previous cycled window to its former
state before activating or raising the next window.  This is useful when
windows are hidden or minimized and included in the list using the
B<--hidden> or B<--minimized> options.  Only iconification will be
restored: window stacking is not restored.

=item B<--tooltips>, B<-t>

Provide more detailed tool tips on menu items.

=item B<--verbose>, B<-v> [I<LEVEL>]

Increases or sets the output verbosity level to I<LEVEL>.  The default
level is C<1>.  Normal output is printed to standard output.  This
option may be repeated.

=item B<--debug>, B<-D> [I<LEVEL>]

Increases or sets the debugging verbosity level to I<LEVEL>.  The
default level is C<0>.  Debugging output is printed to standard error.
This option may be repeated.

=back

=head1 USAGE

B<xde-wkspmenu> current uses F<libwnck+> or F<libwnck> both to identify
the window manager and to provide the window actions menu.  The range
and format of window actions provided by F<libwnck+> is superior to
F<libwnck>.  This use means that B<xde-wkspmenu> does not currently
provide any support for window managers that do not have a modicum of
compliance to the EWMH/NetWM specifications.  That may change in the
future.

To locate the menu under a button that was pressed in, for example, an
external panel, where the button has the geometry C<55x20+30+0>, specify
the C<--where='55x20+30+0'> option.  This will properly position the
menu under the button.

=head2 WINDOW MANAGERS

B<xde-wkspmenu> provides a number of formats consistent with the use of
workspace menus in various lightweight window managers.  The formats are
as follows:

=over

=item L<2bwm(1)>

L<2bwm(1)> does not provide a workspace menu of its own.
L<2bwm(1)> is supported and should work well.

=item L<adwm(1)>

L<adwm(1)> does not provide a workspace menu of its own.
L<adwm(1)> is supported and should work well.
When running under L<adwm(1)>, B<xde-wkspmenu> also supports display and
changing of the mode of the desktop between the various supported tiling
and floating modes.

=item L<aewm(1)>

L<aewm(1)> does not provide a workspace menu of its own.
L<aewm(1)> is supported and should work well.

=item L<aewm++(1)>

L<aewm++(1)> is barely ICCCM compliant.  It does not support EWMH/NetWM
nor GNOME/WinWM hints and is, therefore, not supported.

=item L<afterstep(1)>

=item L<awesome(1)>

L<awesome(1)> does not provide a workspace menu of its own.
L<awesome(1)> is supported and should work well.

=item L<blackbox(1)>

L<blackbox(1)>, when run with L<bbkeys(1)>, provides an adequate
workspace menu of its own and it follows the style of the window manager.
Nevertheless, L<blackbox(1)> is supported and should work well.

=item L<bspwm(1)>

L<bspwm(1)> does not provide a workspace menu of its own.
L<bspwm(1)> is supported and should work well.

=item L<ctwm(1)>

L<ctwm(1)> is only GNOME/WinWM compliant and is not yet supported by
F<libwnck+>.  B<xde-wkspmenu> mitigates this to some extent; however, use
L<etwm(1)> instead.

=item L<cwm(1)>

L<cwm(1)> is supported, but it doesn't work that well because L<cwm(1)>
is not placing B<_NET_WM_STATE> on client windows, so F<libwnck+> cannot
locate them.

=item L<dtwm(1)>

L<dtwm(1)> is only ICCCM and OSF/Motif compliant.  F<libwnck+> does not
yet support OSF/Motif/CDE, but B<xde-wkspmenu> mitigates this to some
extent.

=item L<dwm(1)>

L<dwm(1)> is barely ICCCM compliant.  It is not supported.

=item L<echinus(1)>

L<echinus(1)> does not provide a workspace menu of its own.
L<echinus(1)> is supported and should work well.

=item L<etwm(1)>

L<etwm(1)> does not provide a workspace menu of its own.
L<etwm(1)> is supported and should work well.

=item L<failsafewm(1)>

L<failsafewm(1)> is minimal and not supported.

=item L<fluxbox(1)>

L<fluxbox(1)> does not provide a workspace menu of its own.
L<fluxbox(1)> is supported and should work well.

=item L<flwm(1)>

L<flwm(1)> supports GNOME/WinWM but not EWMH/NetWM and is not currently
supported by F<libwnck+>.  B<xde-wkspmenu> mitigates this to some extent.

=item L<fvwm(1)>

L<fvwm(1)> does not provide a workspace menu of its own.
L<fvwm(1)> is supported and should work well.

=item L<glasswm(1)>

L<glasswm(1)> provides some window control atoms of its own; however,
B<xde-wkspmenu> does not support these at this time.

=item L<goomwwm(1)>

L<goomwwm(1)> does not provide a workspace menu of its own.
L<goomwwm(1)> is supported and should work well.

=item L<herbstluftwm(1)>

L<herbstluftwm(1)> does not provide a workspace menu of its own.
L<herbstluftwm(1)> is supported and should work well.

=item L<i3(1)>

L<i3(1)> does not provide a workspace menu of its own.
L<i3(1)> is supported and should work well.

=item L<icewm(1)>

L<icewm(1)> provides an adequate a workspace menu pop-up of its
own and it follows the style of the window manager.
Nevertheless, L<icewm(1)> is supported and should work well.

=item L<jwm(1)>

L<jwm(1)> does not provide a workspace menu of its own.
L<jwm(1)> is supported and should work well.

=item L<larswm(1)>

L<larswm(1)> is barely ICCCM compliant and is, therefore, not supported.

=item L<matwm2(1)>

L<matwm2(1)> does not provide a workspace menu of its own.
L<matwm2(1)> is supported and should work well.

=item L<metacity(1)>

L<metacity(1)> provides an adequate workspace menu of its
own and it follows the style of the window manager.
Nevertheless, L<metacity(1)> is supported and should work well.

=item L<mvwm(1)>

L<mvwm(1)> does not provide a workspace menu of its own.
L<mvwm(1)> is supported and should work well.

=item L<mwm(1)>

L<mwm(1)> only supports ICCCM and OSF/Motif and does not support
multiple desktops.  It is not supported.

=item L<openbox(1)>

L<openbox(1)> does not provide a workspace menu of its own.
L<openbox(1)> is supported and should work well.

=item L<pekwm(1)>

L<pekwm(1)> does not provide a workspace menu of its own.
L<pekwm(1)> is supported and should work well.

=item L<spectrwm(1)>

L<spectrwm(1)> is supported, but it doesn't work that well because, like
L<cwm(1)>, L<spectrwm(1)> is not placing B<_NET_WM_STATE> on client
windows, so F<libwnck+> cannot locate them.  This may have been fixed in
more current versions of L<spectrwm(1)>.

=item L<twm(1)>

L<twm(1)> only supports part of ICCCM and is not supported.

=item L<uwm(1)>

L<uwm(1)> does not provide a workspace menu of its own.
L<uwm(1)> is supported and should work well.

=item L<velox(1)>

L<velox(1)> is untested.

=item L<vtwm(1)>

L<vtwm(1)> is barely ICCCM compliant and currently unsupported: use
L<etwm(1)> instead.

=item L<waimea(1)>

L<waimea(1)> does not provide a workspace menu of its own.
L<waimea(1)> is supported and should work well.  Because L<waimea(1)>
has other issues, use the version at
L<https://github.com/bbidulock/waimea> for a corrected version.

=item L<wind(1)>

L<wind(1)> does not provide a workspace menu of its own.
L<wind(1)> is supported and should work well.

=item L<wm2(1)>

L<wm2(1)> is barely ICCCM compliant and currently unsupported: use its
L<wmx(1)> derivative.

=item L<wmaker(1)>

L<wmaker(1)> provides an adequate a workspace menu of its
own and it follows the theme of the window manager.
Nevertheless, L<wmaker(1)> is supported and should work well.

=item L<wmii(1)>

L<wmii(1)> does not provide a workspace menu of its own.
L<wmii(1)> is supported and should work well.

=item L<wmx(1)>

L<wmx(1)> does not provide a workspace menu of its own.
L<wmx(1)> is supported and should work well.

=item L<xdwm(1)>

L<xdwm(1)> has minimal EWMH/NetWM support.  It should still work
somewhat.

=item L<yeahwm(1)>

L<yeahwm(1)> is barely ICCCM compliant and is currently unsupported.

=back

=head1 HISTORY

I wrote B<xde-wkspmenu> primarily for the L<adwm(1)> window manager (and
variations of L<dwm(1)>) that do not support a workspace menu of their
own.  Existing workspace menus associated with panels (and typically
provided by F<libwnck>) do not support the special features associated
with tagging and tiling window managers.

=head1 AUTHOR

Brian Bidulock L<mailto:bidulock@openss7.org>.

=head1 SEE ALSO

L<getopt_long_only(3)>,
L<xde-ctools(1)>
L<xde-pager(1)>,
L<xde-winlist(1)>,
L<xde-keys(1)>.

=cut

# vim: set sw=4 tw=72 nocin spell:
