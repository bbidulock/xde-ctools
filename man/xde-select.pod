=pod

=head1 NAME

xde-select - window cycling for XDE

=head1 SYNOPSIS

B<xde-select> [I<OPTIONS>]

=head1 DESCRIPTION

Provides window cycling feedback for window managers that do not provide
window cycling feedback themselves or for those that provide an inferior
feedback.  The window cycling feedback is an icon and label that
corresponds to the active window on the current monitor (or multiple
monitors).  The feedback pop-up can also have a window selected using
the mouse.

=head1 OPTIONS

B<xde-select> accepts the following options:

=head2 COMMAND OPTIONS

When specified, the following options alter the primary operating mode
of the program.

=over

=item I<unspecified>

When no command option is specified, the default is to run the selector
without replacing an existing instance.

=item B<--replace>, B<-r>

Run the selector, but replace a running instance of B<xde-select>.

=item B<--quit>, B<-q>

Ask a running instance of B<xde-select> to quit.

=item B<--help>, B<-h>

Prints usage information and the current options setting and defaults
and exits.

=item B<--version>, B<-V>

Prints the version of the program and a brief copyright statement and
exits.  Parse the first line with L<awk(1)> to obtain just the version
number.

=item B<--copying>, B<-C>

Prints the long copying permission statement and exits.

=back

=head2 GENERAL OPTIONS

The following options are general options:

=over

=item B<--display>, B<-d> I<DISPLAY>

Specify the display to use (overriding the B<DISPLAY> environment
variable).  The default is the value of the B<DISPLAY> environment
variable.

=item B<--screen>, B<-s> I<SCREEN>

Specify the screen number to use when locating the current window and
workspace.  The default is either specified by the B<DISPLAY>
environment variable (which that variable specifies a screen);
otherwise, all screens will be considered.

=item B<--timeout>, B<-t> I<TIMEOUT>

When cycling the windows with the mouse or other than a modified
keystroke, or if a key is pressed that does not result in a window
change, the feedback window will persist for I<TIMEOUT> milliseconds.
The default is 1000 (or 1 second).

=item B<--border>, B<-B> I<WIDTH>

Places a border around the selector of I<WIDTH> pixels.  The default is 5
pixels.

=item B<--where>, B<-W> {B<pointer>|B<center>|B<topleft>|B<icongeom>|I<GEOMETRY>}

Specifies the position for the pop-up menu.  This can be one of the
following values (case insensitive, may be abbreviated):

=over

=item C<pointer>

Place the northwest corner of the pop-up under the mouse pointer.  This
will always succeed.

=item C<center>

Place the menu in the center of the associated window when visible (for
icon mode) or the center of the current monitor (for other modes).  When
not visible (minimized or hidden), defaults to C<icongeom> if there is
an icon geometry defined, otherwise, defaults to the center of the
monitor on which the window would normally appear.

=item C<topleft>

Please the menu in the top-left corner of the client window (inside any
decorative border) for icon mode, and the top-left corner of the screen
for other modes.  When the window is not visible (minimized or hidden),
defaults to C<icongeom> if there is an icon geometry defined, otherwise,
defaults to the top-left corner of the monitor on which the window would
normally appear.

=item C<icongeom>

Place the menu above or below (depending on position) the icon geometry
area.  This is the area described by the B<_NET_WM_ICON_GEOMETRY>
property on the associated window.  Note that this is the only location
that makes sense for a minimized or hidden window.  If there is no
B<_NET_WM_ICON_GEOMETRY> property, defaults to C<topleft> for the
window, followed by C<center> for the monitor.

=item I<GEOMETRY>

Specify the exact position at which to place the pop-up.  Any height or
width in the specified I<GEOMETRY> is advisory.

=back

=item B<--verbose>, B<-v> [I<LEVEL>]

Print extra information on standard error while running.  When
I<LEVEL> is not specified, simply increments the output verbosity;
otherwise, the output verbosity is set to I<LEVEL>.

=item B<--debug>, B<-D> [I<LEVEL>]

Print debugging information on standard error while running.  When
I<LEVEL> is not specified, simply increments the debug level; otherwise,
the debug level is set to I<LEVEL>.

=back

=head2 SESSION MANAGEMENT OPTIONS

X session management options are not used by another user other than the
X11 Session Manager.  The following options are used by X session
management:

=over

=item B<-clientId> I<CLIENTID>

Specifies the X Session Management client identifier of the previously
running session of B<xde-select>.

=item B<-restore> I<SAVEFILE>

Specifies the X Session Management filename of a file to which to save
session information.

=back

=head1 USAGE

B<xde-select> currently uses B<libwnck+> or F<libwnck> to detect
active window changes and to provide the window feedback, so the window
manager must support some modicum of EWMH/NetWM compliance for the
feedback to be effective.  Eventually I might make F<libwnck+> support
GNOME1/WinWM, OSF/Motif and even just ICCCM compliant window managers,
but, for now, some EWMH/NetWM compliance is needed.

Run B<xde-select> in the background or launch using the supplied XDG
autostart file.  The program takes the following steps:

=over

=item 1.

Waits for a desktop change as signalled by a change to
B<_NET_ACTIVE_WINDOW> on the root window of any screen.

=item 2.

When the active window changes, the program grabs the pointer and the
keyboard.  If there is a keyboard modifier down, it displays the
feedback window and proxies key presses and releases to the root window.
When all modifiers are released or when a selection is made or its
pointer grab is broken, it drops the feedback window and waits for
another window change.

While the feedback pop-up is displayed, the mouse can be used to select
a window.  When selected, the window will not drop until the mouse
leaves the pop-up, a modifier is released, or a key press is made that
does not result in a window change.

=back

=head2 OPERATING MODES

There are three possible operating modes for B<xde-select>, as follows:

=over

=item 1.

B<xde-select> behaves like L<xde-pager(1)> but only displays the current
workspace in the pager and only pops up the window when the active
window changes.  This mode works well with all window managers but is
not the most attractive.

=item 2.

B<xde-select> behaves like L<wmaker(1)> and provides a marquee of window
icons for the current desktop.  This mode works with all window managers
but is not the most attractive.

=item 3.

B<xde-select> behaves in tiling mode and pops up a single icon over the
active window.  In this mode, the pop-up does not grab the pointer.
This mode works best with dynamic window managers.

=back

=head2 WINDOW MANAGERS

=over

=item L<2bwm(1)>

is supported and works well.

=item L<adwm(1)>

is supported and works well.

=item L<aewm(1)>

is supported and works well.

=item L<aewm++(1)>

L<aewm++(1)> is barely ICCCM compliant and is, therefore, not supported.

=item L<afterstep(1)>

is supported and works well.

=item L<awesome(1)>

is supported and works well.

=item L<blackbox(1)>

When running with L<bbkeys(1)>, L<blackbox(1)> has its own window
cycling feedback.  When running under L<blackbox(1)>, B<xde-select> does
nothing.

=item L<bspwm(1)>

is supported and works well.

=item L<ctwm(1)>

L<ctwm(1)> is only GNOME/WinWM compliant and is not yet supported by
F<libwnck+>.  B<xde-select> mitigates this to some extent; however, use
L<etwm(1)> instead.

=item L<cwm(1)>

L<cwm(1)> is supported, but it doesn't work that well because L<cwm(1)>
is not placing B<_NET_WM_STATE> on client windows, so F<libwnck+> cannot
locate them and will not provide contents in the selector.

=item L<dtwm(1)>

L<dtwm(1)> is only OSF/Motif compliant and does support multiple
desktops; however, F<libwnck+> does not yet support OSF/Motif/CDE.

=item L<dwm(1)>

L<dwm(1)> is barely ICCCM compliant.  It is not supported.

=item L<echinus(1)>

is supported and works well.

=item L<etwm(1)>

is supported and works well.

=item L<failsafewm(1)>

L<failsafewm(1)> has no active window.

=item L<fluxbox(1)>

L<fluxbox(1)> provides its own window cycling feedback.  When running
under L<fluxbox(1)>, B<xde-select> does nothing.

=item L<flwm(1)>

L<flwm(1)> supports GNOME/WinWM but not EWMH/NetWM and is not currently
supported by F<libwnck+>.  B<xde-select> mitigates this to some extent.

=item L<glasswm(1)>

L<glasswm(1)> provides some window control atoms of its own; however,
B<xde-select> does not support these at this time.

=item L<goomwwm(1)>

is supported and should work well.

=item L<herbstluftwm(1)>

is supported and works well.

=item L<i3(1)>

L<i3(1)> is supported; however,  L<i3(1)> does not support
B<_NET_NUMBER_OF_DESKTOPS>, so only the current desktop is shown at any
given time, which makes it less effective.  (This may have been fixed in
current versions of L<i3(1)>).

=item L<icewm(1)>

L<icewm(1)> has its own window cycling feedback.  When running under
L<icewm(1)>, B<xde-select> does nothing.

=item L<jwm(1)>

=item L<larswm(1)>

L<larswm(1)> is barely ICCCM compliant and is, therefore, not supported.

=item L<matwm2(1)>

is supported and works well.

=item L<metacity(1)>

L<metacity(1)> provides its own competent window switching feedback
pop-up (and a fancy one too).
When B<xde-select> detects that it is running under L<metacity(1)> it
will simply do nothing.

=item L<mvwm(1)>

is supported and works well.

=item L<mwm(1)>

L<mwm(1)> only supports OSF/Motif and does not support multiple
desktops.  Is is not supported.

=item L<openbox(1)>

L<openbox(1)> provides its own meager window switching feedback pop-up.
It does not respect B<_NET_DESKTOP_LAYOUT> but does not provide any of
the contents of the desktop.  When both are running it is a little
confusing, so when B<xde-select> detects that it is running under
L<openbox(1)> it will simply do nothing.

=item L<pekwm(1)>

L<pekwm(1)> provides its own broken window switching feedback pop-up;
however, it does not respect B<_NET_DESKTOP_LAYOUT> and key bindings are
confused.
When B<xde-select> detects that it is running under L<pekwm(1)> it will
simply do nothing.

=item L<spectrwm(1)>

L<spectrwm(1)> is supported, but it doesn't work that well because, like
L<cwm(1)>, L<spectrwm(1)> is not placing B<_NET_WM_STATE> on client
windows, so F<libwnck+> cannot locate them and will not provide contents
in the selector.  This may have been fixed in more current versions of
L<spectrwm(1)>.

=item L<twm(1)>

L<twm(1)> does not support multiple desktops and is unsupported.

=item L<uwm(1)>

is supported and works well.

=item L<velox(1)>

is untested.

=item L<vtwm(1)>

L<vtwm(1)> is barely ICCCM compliant and currently unsupported: use
L<etwm(1)> instead.

=item L<waimea(1)>

is supported; however, waimea defaults to triple-sized large desktops in
a 2x2 arrangement.  With large virtual desktops L<libwnck+> gets
confused just as with L<afterstep(1)>.  L<fvwm(1)> must be doing
something right.  It appears to be B<_NET_DESKTOP_VIEWPORT>, which is
supposed to be set to the view port position of each desktop (and
isn't).  Use the waimea at L<https://github.com/bbidulock/waimea> for a
corrected version.

=item L<wind(1)>

is supported and works well.

=item L<wm2(1)>

L<wm2(1)> is barely ICCCM compliant and currently unsupported: use its
L<wmx(1)> derivative.

=item L<wmaker(1)>

L<wmaker(1)> provides its own competent window cycling feedback.  When
B<xde-select> detects that it is running under L<wmaker(1)>, it simply
does nothing.

=item L<wmii(1)>

is supported and works well.  L<wmii(1)> was stealing the focus back
from the pop-up, but this was fixed.

=item L<wmx(1)>

is supported and works well.

=item L<xdwm(1)>

L<xdwm(1)> does not support EWMH/NetWM for desktops.

=item L<yeahwm(1)>

L<yeahwm(1)> does not support EWMH/NetWM and is currently unsupported.
The selector will simply not do anything while this window manager is
running.

=back

=head1 ENVIRONMENT

The following environment variables are considered by the program.

=over

=item B<SESSION_MANAGER>

Specifies the list of transport connections on which to contact the
session manager.

=item B<SM_SAVE_DIR>

Specifies the directory in which to save session files.  When unset, the
directory defaults to the user's home directory.

=back

=head1 HISTORY

I wrote this program particularly for use with L<adwm(1)> and other
tiling window managers that provide no feedback for window changes and
do not typically run will with a panel or pager.  It provides workspace
change feedback without taking up valuable screen real-estate while the
window is not changing.  Also, when used with F<libwnck+>, the selector
is multiple-monitor aware and can handle per-monitor tagged workspaces.

=head1 AUTHOR

Brian Bidulock L<mailto:bidulock@openss7.org>.

=head1 SEE ALSO

L<getopt_long_only(3)>,
L<xde-ctools(1)>,
L<xde-keys(1)>

=cut

# vim: set sw=4 tw=72 nocin spell spelllang=en_ca:
